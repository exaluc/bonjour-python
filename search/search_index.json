{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accueil","text":"<p>\ud83d\udc0d Bienvenue dans le monde fascinant de Python ! \ud83c\udf0d</p> <p>Salut et bienvenue \u00e0 toi, futur codeur Python ! Tu es sur le point d'entamer un voyage passionnant \u00e0 travers l'un des langages de programmation les plus populaires et les plus aim\u00e9s au monde.</p> <p>Pourquoi Python ? Parce qu'il est simple, \u00e9l\u00e9gant et incroyablement puissant. Que tu souhaites analyser des donn\u00e9es, construire des applications web, ou m\u00eame plonger dans le monde myst\u00e9rieux de l'intelligence artificielle, Python est le choix id\u00e9al.</p> <p>Mais avant de plonger t\u00eate baiss\u00e9e, prenons un moment pour nous d\u00e9tendre et comprendre le chemin qui nous attend. \ud83d\udee4\ufe0f Chaque section de ce cours a \u00e9t\u00e9 soigneusement con\u00e7ue pour te guider \u00e9tape par \u00e9tape, de la d\u00e9couverte des bases \u00e0 l'exploration de concepts avanc\u00e9s. N'h\u00e9site pas \u00e0 progresser \u00e0 ton propre rythme et \u00e0 profiter de chaque instant d'apprentissage.</p> <p>N'oublie pas : chaque codeur, m\u00eame le plus exp\u00e9riment\u00e9, a commenc\u00e9 par \u00eatre un d\u00e9butant. Alors, respire profond\u00e9ment, garde l'esprit ouvert, et surtout, amuse-toi ! \ud83d\udca1\ud83d\ude80</p> <p>Accroche-toi bien, car notre aventure Python commence... maintenant ! \ud83d\ude80\ud83d\udc0d</p>"},{"location":"1-introduction/","title":"Introduction \u00e0 Python","text":""},{"location":"1-introduction/#quest-ce-que-python","title":"Qu'est-ce que Python ?","text":"<p>Python est un langage de programmation interpr\u00e9t\u00e9, haut niveau et orient\u00e9 objet. Il a \u00e9t\u00e9 cr\u00e9\u00e9 par Guido van Rossum et a \u00e9t\u00e9 lanc\u00e9 pour la premi\u00e8re fois en 1991. Sa conception simple et sa syntaxe lisible le rendent parfait pour les d\u00e9butants en programmation. Il est utilis\u00e9 dans divers domaines tels que le d\u00e9veloppement web, la science des donn\u00e9es, l'intelligence artificielle, l'automatisation, et bien d'autres.</p>"},{"location":"1-introduction/#pourquoi-choisir-python","title":"Pourquoi choisir Python ?","text":"<ol> <li>Facilit\u00e9 d'apprentissage : Sa syntaxe claire et sa nature interpr\u00e9t\u00e9e le rendent id\u00e9al pour les d\u00e9butants.</li> <li>Polyvalent : Python est utilis\u00e9 dans le d\u00e9veloppement web, l'analyse de donn\u00e9es, l'automatisation, le d\u00e9veloppement de jeux, etc.</li> <li>Communaut\u00e9 : Python poss\u00e8de une large communaut\u00e9, ce qui signifie que vous pouvez trouver une abondance de ressources, de biblioth\u00e8ques et de frameworks.</li> <li>Performance : Bien que Python soit interpr\u00e9t\u00e9 et g\u00e9n\u00e9ralement plus lent que les langages compil\u00e9s, des outils tels que PyPy peuvent am\u00e9liorer sa performance.</li> <li>Interop\u00e9rabilit\u00e9 : Python peut \u00eatre facilement int\u00e9gr\u00e9 avec d'autres langages tels que C et C++.</li> </ol>"},{"location":"1-introduction/#installation-de-python-et-configuration-de-lenvironnement","title":"Installation de Python et configuration de l'environnement","text":"<ol> <li> <p>T\u00e9l\u00e9chargement : Rendez-vous sur le site officiel de Python pour t\u00e9l\u00e9charger la derni\u00e8re version de Python. Choisissez la version adapt\u00e9e \u00e0 votre syst\u00e8me d'exploitation (Windows, MacOS, Linux).</p> </li> <li> <p>Installation :</p> <ul> <li>Windows : Lancez l'ex\u00e9cutable t\u00e9l\u00e9charg\u00e9 et suivez les instructions. Assurez-vous de cocher la case \"Add Python to PATH\" lors de l'installation.</li> <li>MacOS : Ouvrez le package t\u00e9l\u00e9charg\u00e9 et suivez les instructions.</li> <li>Linux : Python est g\u00e9n\u00e9ralement pr\u00e9install\u00e9 sur la plupart des distributions Linux. Cependant, vous pouvez \u00e9galement l'installer via le gestionnaire de paquets de votre distribution.</li> </ul> </li> <li> <p>V\u00e9rification : Pour v\u00e9rifier que Python a \u00e9t\u00e9 correctement install\u00e9, ouvrez un terminal ou une invite de commande et tapez <code>python --version</code>. Cela devrait afficher la version de Python que vous avez install\u00e9e.</p> </li> <li> <p>Configurer l'environnement virtuel (optionnel) : </p> <ul> <li>Installez <code>virtualenv</code> en utilisant pip: <code>pip install virtualenv</code></li> <li>Cr\u00e9ez un nouvel environnement virtuel : <code>virtualenv mon_environnement</code></li> <li>Activez l'environnement : <ul> <li>Windows : <code>mon_environnement\\Scripts\\activate</code></li> <li>MacOS/Linux : <code>source mon_environnement/bin/activate</code></li> </ul> </li> <li>Pour d\u00e9sactiver l'environnement, tapez simplement <code>deactivate</code>.</li> </ul> </li> </ol>"},{"location":"10-concepts-avances/","title":"Concepts Avanc\u00e9s","text":""},{"location":"10-concepts-avances/#iterateurs-et-generateurs","title":"It\u00e9rateurs et G\u00e9n\u00e9rateurs \ud83d\udd01","text":"<ul> <li>It\u00e9rateurs: Un it\u00e9rateur est un objet qui produit les \u00e9l\u00e9ments \u00e0 parcourir un \u00e0 un. Vous avez probablement d\u00e9j\u00e0 utilis\u00e9 <code>iter()</code> pour obtenir un it\u00e9rateur \u00e0 partir d'une liste ou d'une autre collection.</li> </ul> <pre><code>iterateur = iter([1, 2, 3])\nprint(next(iterateur))  # Affiche: 1\n</code></pre> <ul> <li>It\u00e9ration personnalis\u00e9e:</li> </ul> <pre><code>class CompteARebours:\ndef __init__(self, debut):\nself.debut = debut\ndef __iter__(self):\nreturn self\ndef __next__(self):\nif self.debut &lt;= 0:\nraise StopIteration\nself.debut -= 1\nreturn self.debut + 1\nfor num in CompteARebours(3):\nprint(num)\n</code></pre> <ul> <li>G\u00e9n\u00e9rateurs: Simples \u00e0 utiliser, les g\u00e9n\u00e9rateurs sont des fonctions qui produisent une s\u00e9quence de r\u00e9sultats plut\u00f4t que de renvoyer une valeur unique.</li> </ul> <pre><code>def compte_a_rebours_gen(debut):\nwhile debut &gt; 0:\nyield debut\ndebut -= 1\nfor num in compte_a_rebours_gen(3):\nprint(num)\n</code></pre>"},{"location":"10-concepts-avances/#comprehensions-de-generateurs","title":"Compr\u00e9hensions de G\u00e9n\u00e9rateurs \ud83d\udca1","text":"<p>Ce sont des expressions qui produisent un g\u00e9n\u00e9rateur.</p> <pre><code>gen = (x**2 for x in range(3))\nfor val in gen:\nprint(val)\n</code></pre>"},{"location":"10-concepts-avances/#decorateurs","title":"D\u00e9corateurs \u2728","text":"<p>Un d\u00e9corateur est une fonction qui prend une autre fonction en argument, ajoute des fonctionnalit\u00e9s et renvoie la fonction.</p> <ul> <li>Utilisation d'un d\u00e9corateur pour logger:</li> </ul> <pre><code>def logger(fonction):\ndef wrapper(*args, **kwargs):\nprint(f\"Ex\u00e9cution de la fonction {fonction.__name__}\")\nreturn fonction(*args, **kwargs)\nreturn wrapper\n@logger\ndef saluer(nom):\nprint(f\"Salut, {nom}!\")\nsaluer(\"Alice\")\n</code></pre>"},{"location":"10-concepts-avances/#metaclasses","title":"M\u00e9taclasses \ud83d\udee0","text":"<p>Une m\u00e9tclasse est une classe de classe. Les m\u00e9taclasses contr\u00f4lent la cr\u00e9ation et l'initialisation des classes.</p> <ul> <li>Utilisation d'une m\u00e9tclasse pour ajouter des attributs automatiquement:</li> </ul> <pre><code>class AttributAjouteMeta(type):\ndef __init__(cls, nom, bases, dct):\ncls.attribut_ajoute = \"Valeur ajout\u00e9e\"\nsuper().__init__(nom, bases, dct)\nclass MaClasse(metaclass=AttributAjouteMeta):\npass\nprint(MaClasse.attribut_ajoute)  # Affiche: \"Valeur ajout\u00e9e\"\n</code></pre>"},{"location":"10-concepts-avances/#context-managers-et-with-statement","title":"Context Managers et <code>with</code> Statement \ud83d\udcc2","text":"<p>Permet de g\u00e9rer des ressources, comme les fichiers, de mani\u00e8re propre et efficace.</p> <pre><code>with open('mon_fichier.txt', 'r') as fichier:\nfor ligne in fichier:\nprint(ligne, end=\"\")\n</code></pre> <p>Avec les concepts avanc\u00e9s, vous pouvez \u00e9crire du code Python plus propre, plus efficace et plus Pythonique. Ces concepts peuvent sembler intimidants au d\u00e9but, mais une fois ma\u00eetris\u00e9s, ils peuvent \u00eatre incroyablement puissants. Lancez-vous et explorez-les! \ud83d\ude80\ud83d\udcda</p>"},{"location":"11-bases-de-donnees/","title":"Travailler avec des Bases de Donn\u00e9es en Python","text":""},{"location":"11-bases-de-donnees/#sqlite-et-python","title":"SQLite et Python \ud83d\udcc1","text":"<p>SQLite est une base de donn\u00e9es relationnelle l\u00e9g\u00e8re qui ne n\u00e9cessite pas de serveur s\u00e9par\u00e9 pour fonctionner. C'est une excellente option pour les applications l\u00e9g\u00e8res, les prototypes ou les applications de bureau.</p> <ol> <li>Cr\u00e9ation et Connexion \u00e0 la base de donn\u00e9es:</li> </ol> <pre><code>import sqlite3\nconnexion = sqlite3.connect('ma_base_de_donnees.db')\n</code></pre> <ol> <li>Manipulation de Tables:</li> </ol> <pre><code>curseur = connexion.cursor()\ncurseur.execute(\"\"\"\nCREATE TABLE IF NOT EXISTS utilisateurs (\n    id INTEGER PRIMARY KEY,\n    nom TEXT NOT NULL,\n    age INTEGER\n)\n\"\"\")\n</code></pre> <ol> <li>Insertion de donn\u00e9es:</li> </ol> <pre><code>curseur.execute(\"INSERT INTO utilisateurs (nom, age) VALUES (?, ?)\", (\"Alice\", 30))\nconnexion.commit()\n</code></pre> <ol> <li>Mise \u00e0 jour de donn\u00e9es:</li> </ol> <pre><code>curseur.execute(\"UPDATE utilisateurs SET age = ? WHERE nom = ?\", (31, \"Alice\"))\nconnexion.commit()\n</code></pre> <ol> <li>Suppression de donn\u00e9es:</li> </ol> <pre><code>curseur.execute(\"DELETE FROM utilisateurs WHERE nom = ?\", (\"Alice\",))\nconnexion.commit()\n</code></pre>"},{"location":"11-bases-de-donnees/#requetes-sql-avancees-en-python","title":"Requ\u00eates SQL avanc\u00e9es en Python \ud83e\uddd0","text":"<ol> <li>Filtrage:</li> </ol> <pre><code>curseur.execute(\"SELECT * FROM utilisateurs WHERE age &gt; 25\")\nutilisateurs_majeurs = curseur.fetchall()\n</code></pre> <ol> <li>Tri:</li> </ol> <pre><code>curseur.execute(\"SELECT * FROM utilisateurs ORDER BY age DESC\")\nutilisateurs_ordonnes = curseur.fetchall()\n</code></pre> <ol> <li>Jointures:</li> </ol> <p>Si nous avons une autre table, disons <code>commandes</code>, nous pouvons lier les donn\u00e9es entre les tables.</p> <pre><code>curseur.execute(\"\"\"\nSELECT u.nom, c.produit \nFROM utilisateurs u \nJOIN commandes c ON u.id = c.id_utilisateur\n\"\"\")\nresultat_jointure = curseur.fetchall()\n</code></pre>"},{"location":"11-bases-de-donnees/#orms-sqlalchemy","title":"ORMs: SQLAlchemy \ud83d\udd04","text":"<p>SQLAlchemy est un ORM qui permet de traduire les op\u00e9rations avec la base de donn\u00e9es en commandes Python.</p> <ol> <li>Mod\u00e9lisation:</li> </ol> <p>Avec SQLAlchemy, chaque table est repr\u00e9sent\u00e9e par une classe.</p> <pre><code>from sqlalchemy import create_engine, Column, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nBase = declarative_base()\nclass Utilisateur(Base):\n__tablename__ = 'utilisateurs'\nid = Column(Integer, primary_key=True)\nnom = Column(String)\nage = Column(Integer)\n</code></pre> <ol> <li>Cr\u00e9ation et Manipulation de la base de donn\u00e9es:</li> </ol> <pre><code>engine = create_engine('sqlite:///ma_base_de_donnees.db')\nBase.metadata.create_all(engine)\nfrom sqlalchemy.orm import sessionmaker\nSession = sessionmaker(bind=engine)\nsession = Session()\n</code></pre> <ol> <li> <p>Op\u00e9rations CRUD:</p> </li> <li> <p>Cr\u00e9ation:</p> </li> </ol> <pre><code>bob = Utilisateur(nom=\"Bob\", age=35)\nsession.add(bob)\nsession.commit()\n</code></pre> <ul> <li>Lecture:</li> </ul> <pre><code>utilisateurs = session.query(Utilisateur).filter(Utilisateur.age &gt; 25).all()\n</code></pre> <ul> <li>Mise \u00e0 jour:</li> </ul> <pre><code>utilisateur = session.query(Utilisateur).filter(Utilisateur.nom == \"Bob\").first()\nutilisateur.age = 36\nsession.commit()\n</code></pre> <ul> <li>Suppression:</li> </ul> <pre><code>session.delete(utilisateur)\nsession.commit()\n</code></pre> <p>Travailler avec des bases de donn\u00e9es est un \u00e9l\u00e9ment essentiel pour de nombreuses applications Python, que ce soit pour stocker des donn\u00e9es locales ou pour interagir avec des bases de donn\u00e9es externes. La facilit\u00e9 d'utilisation et la flexibilit\u00e9 offertes par Python dans ce domaine le rendent particuli\u00e8rement attrayant pour le d\u00e9veloppement de bases de donn\u00e9es. \ud83d\udcda\ud83d\udc69\u200d\ud83d\udcbb\ud83d\udc68\u200d\ud83d\udcbb\ud83c\udf10</p>"},{"location":"12-web-dev/","title":"D\u00e9veloppement Web avec Python","text":"<p>D\u00e9couvrir le monde du d\u00e9veloppement web en Python, c'est comme entrer dans une boutique remplie de diff\u00e9rentes \u00e9tag\u00e8res, chacune offrant un outil adapt\u00e9 \u00e0 une t\u00e2che sp\u00e9cifique. Plongeons dans ce monde fascinant !</p>"},{"location":"12-web-dev/#flask-le-micro-framework","title":"Flask : Le Micro-Framework \ud83c\udf31","text":"<p>Pr\u00e9sentation : Flask est comme un bloc Lego de base sur lequel vous pouvez construire ce que vous voulez. Il offre une simplicit\u00e9 et une flexibilit\u00e9 in\u00e9gal\u00e9es pour d\u00e9marrer rapidement.</p> <p>Installation : <pre><code>pip install Flask\n</code></pre></p> <p>Exemple basique : <pre><code>from flask import Flask, render_template\napp = Flask(__name__)\n@app.route('/')\ndef accueil():\nreturn \"Salut avec Flask!\"\n</code></pre></p> <p>Utilisation de templates : Flask s'int\u00e8gre facilement avec le moteur de template Jinja2. Cr\u00e9ez un dossier <code>templates</code> et ajoutez un fichier <code>accueil.html</code> avec le contenu suivant : <pre><code>&lt;h1&gt;Bienvenue sur mon site Flask&lt;/h1&gt;\n&lt;p&gt;{{ message }}&lt;/p&gt;\n</code></pre> Puis, modifiez votre route pour renvoyer ce template : <pre><code>@app.route('/')\ndef accueil():\nreturn render_template(\"accueil.html\", message=\"Salut encore avec Flask!\")\n</code></pre></p>"},{"location":"12-web-dev/#django-le-titan","title":"Django : Le Titan \ud83c\udfdb\ufe0f","text":"<p>Pr\u00e9sentation : Imaginez un ch\u00e2teau avec tout ce dont vous avez besoin \u00e0 l'int\u00e9rieur. C'est Django, une forteresse pour votre application web, riche en fonctionnalit\u00e9s.</p> <p>Installation : <pre><code>pip install django\n</code></pre></p> <p>D\u00e9marrage rapide : - Cr\u00e9ation d'un projet et d'une app : <pre><code>django-admin startproject monprojet\ncd monprojet\npython manage.py startapp monapp\n</code></pre></p> <p>Configuration : Pour int\u00e9grer <code>monapp</code>, ajoutez-le \u00e0 <code>INSTALLED_APPS</code> dans <code>monprojet/settings.py</code> : <pre><code>INSTALLED_APPS = [\n...\n'monapp',\n]\n</code></pre></p> <p>Exemple de mod\u00e8le : Dans <code>monapp/models.py</code> : <pre><code>from django.db import models\nclass Article(models.Model):\ntitre = models.CharField(max_length=100)\ncontenu = models.TextField()\n</code></pre></p> <p>Apr\u00e8s avoir d\u00e9fini votre mod\u00e8le, n'oubliez pas de faire une migration : <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre></p>"},{"location":"12-web-dev/#fastapi-la-fusee","title":"FastAPI : La fus\u00e9e \ud83d\ude80","text":"<p>Pr\u00e9sentation : Si Flask est un bloc Lego et Django un ch\u00e2teau, FastAPI est comme une fus\u00e9e. Il vous emm\u00e8ne l\u00e0 o\u00f9 vous devez aller, et vite !</p> <p>Installation : <pre><code>pip install fastapi[all] uvicorn\n</code></pre></p> <p>Documentation automatique : L'une des meilleures caract\u00e9ristiques de FastAPI est qu'il g\u00e9n\u00e8re une documentation interactive (Swagger UI) pour votre API. Une fois votre application lanc\u00e9e, acc\u00e9dez \u00e0 <code>http://localhost:8000/docs</code>.</p> <p>Exemple avec Pydantic : FastAPI utilise Pydantic pour la validation des donn\u00e9es : <pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel\napp = FastAPI()\nclass Article(BaseModel):\ntitre: str\ncontenu: str\n@app.post(\"/articles/\")\nasync def create_article(article: Article):\nreturn {\"titre\": article.titre, \"contenu\": article.contenu}\n</code></pre></p> <p>Conclusion :</p> <p>En mati\u00e8re de d\u00e9veloppement web en Python, il existe un framework pour chaque besoin. Flask pour la flexibilit\u00e9, Django pour sa richesse, et FastAPI pour la rapidit\u00e9 et la modernit\u00e9. Votre projet d\u00e9terminera le meilleur choix ! \ud83d\udcbc\ud83d\udd27\ud83d\udda5\ufe0f</p>"},{"location":"13-api-web-scraping/","title":"APIs et Web Scraping","text":"<p>Dans notre voyage num\u00e9rique, les API et le Web Scraping sont des outils inestimables pour d\u00e9bloquer des r\u00e9servoirs d'informations en ligne. Allons plus loin dans notre compr\u00e9hension avec des exemples avanc\u00e9s et professionnels.</p>"},{"location":"13-api-web-scraping/#1-quest-ce-quune-api","title":"1. Qu'est-ce qu'une API? \ud83d\udeaa","text":"<p>Une API, ou Interface de Programmation d'Application, est comme une fen\u00eatre sur un logiciel, permettant \u00e0 d'autres logiciels d'y acc\u00e9der et d'interagir avec lui. Elle d\u00e9finit la mani\u00e8re dont les requ\u00eates sont trait\u00e9es, les donn\u00e9es accessibles, et leur format de sortie.</p>"},{"location":"13-api-web-scraping/#api-nvd-national-vulnerability-database","title":"API NVD (National Vulnerability Database) \ud83d\udee1\ufe0f","text":"<p>NVD fournit une API pour acc\u00e9der \u00e0 des informations d\u00e9taill\u00e9es sur les CVE (Common Vulnerabilities and Exposures) li\u00e9es \u00e0 des failles de s\u00e9curit\u00e9.</p> <ol> <li>R\u00e9cup\u00e9rer les d\u00e9tails d'un CVE sp\u00e9cifique:</li> </ol> <pre><code>import requests\nCVE_ID = \"CVE-2021-12345\"\nURL_NVD = f\"https://services.nvd.nist.gov/rest/json/cve/1.0/{CVE_ID}\"\nresponse = requests.get(URL_NVD)\nif response.status_code == 200:\ncve_data = response.json()['result']['CVE_Items'][0]\nprint(f\"D\u00e9tails pour {CVE_ID}: {cve_data['cve']['description']['description_data'][0]['value']}\")\n</code></pre> <ol> <li>Lister les CVE r\u00e9cents:</li> </ol> <pre><code>URL_RECENT_CVE = \"https://services.nvd.nist.gov/rest/json/cves/1.0?resultsPerPage=5\"\nresponse = requests.get(URL_RECENT_CVE)\nif response.status_code == 200:\ncves = response.json()['result']['CVE_Items']\nfor cve in cves:\nprint(cve['cve']['CVE_data_meta']['ID'], \":\", cve['cve']['description']['description_data'][0]['value'])\n</code></pre>"},{"location":"13-api-web-scraping/#2-lart-du-web-scraping","title":"2. L'Art du Web Scraping \ud83c\udfa8\ud83d\udd78\ufe0f","text":"<p>Lorsqu'une API n'est pas disponible, le Web Scraping intervient pour extraire des donn\u00e9es depuis une page web.</p>"},{"location":"13-api-web-scraping/#scraping-avance-avec-beautiful-soup-et-selenium","title":"Scraping avanc\u00e9 avec Beautiful Soup et Selenium \ud83e\udd16","text":"<p>Selenium est particuli\u00e8rement utile pour interagir avec des pages dynamiques qui n\u00e9cessitent une interaction utilisateur, comme le remplissage d'un formulaire.</p> <p>Exemple basique:</p> <pre><code>import requests\nfrom bs4 import BeautifulSoup\nURL = \"https://www.openai.com/research/\"\nresponse = requests.get(URL)\nsoup = BeautifulSoup(response.content, \"html.parser\")\ntitle = soup.title.text\nprint(title)\n</code></pre> <pre><code>from selenium import webdriver\nfrom bs4 import BeautifulSoup\nURL_DYNAMIC = \"https://www.site-dynamique\"\nbrowser = webdriver.Chrome()\nbrowser.get(URL_DYNAMIC)\n# Interaction avec la page et extraction des donn\u00e9es\nelement = browser.find_element_by_id(\"element_id\")\nelement.send_keys(\"recherche\")\n# R\u00e9cup\u00e9ration des donn\u00e9es\nhtml = browser.page_source\nsoup = BeautifulSoup(html, \"html.parser\")\nresults = soup.find_all(\"div\", class_=\"result-class\")\nfor result in results:\nprint(result.text)\nbrowser.close()\n</code></pre>"},{"location":"13-api-web-scraping/#3-explorons-dautres-apis-professionnelles","title":"3. Explorons d'autres APIs professionnelles \ud83c\udfb2","text":"<ul> <li> <p>API REST Countries \ud83c\udf0d: Fournit des informations sur les pays.</p> <pre><code>import requests\nURL_COUNTRIES = \"https://restcountries.com/v3.1/all\"\nresponse = requests.get(URL_COUNTRIES)\ncountries = response.json()\nfor country in countries[:5]:\nprint(country['name']['common'])\n</code></pre> </li> <li> <p>API CoinGecko \ud83d\udcca: Donn\u00e9es sur les prix des cryptomonnaies.</p> <pre><code>import requests\nURL_CRYPTO = \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&amp;ids=bitcoin,ethereum&amp;order=market_cap_desc&amp;limit=5&amp;sparkline=false\"\nresponse = requests.get(URL_CRYPTO)\ncryptos = response.json()\nfor crypto in cryptos:\nprint(f\"{crypto['name']} - {crypto['current_price']} USD\")\n</code></pre> </li> </ul>"},{"location":"13-api-web-scraping/#conclusion","title":"Conclusion \ud83c\udf93","text":"<p>Avec une gamme d'APIs disponibles et les puissants outils de Web Scraping \u00e0 notre disposition, l'acc\u00e8s \u00e0 des informations utiles et pertinentes est plus facile que jamais. Cependant, utilisez ces outils avec prudence, en respectant les conditions d'utilisation et les droits d'acc\u00e8s.</p>"},{"location":"14-analyse-de-donnees/","title":"Python pour l'Analyse de Donn\u00e9es","text":"<p>Le monde des donn\u00e9es est vaste et en constante \u00e9volution. Python, gr\u00e2ce \u00e0 sa simplicit\u00e9 et sa flexibilit\u00e9, est devenu l'outil privil\u00e9gi\u00e9 des analystes. D\u00e9couvrons comment Pandas et NumPy nous aident \u00e0 naviguer dans ce monde.</p>"},{"location":"14-analyse-de-donnees/#introduction-a-pandas-et-numpy","title":"Introduction \u00e0 Pandas et NumPy \ud83d\udcda","text":"<p>Pandas, construit sur NumPy, est la pierre angulaire de l'analyse de donn\u00e9es avec Python. Alors que NumPy est ax\u00e9 sur les tableaux num\u00e9riques, Pandas \u00e9tend cette capacit\u00e9 pour traiter des donn\u00e9es plus complexes et structur\u00e9es.</p> <p>Installation:</p> <pre><code>pip install pandas numpy\n</code></pre>"},{"location":"14-analyse-de-donnees/#decouverte-de-pandas","title":"D\u00e9couverte de Pandas \ud83d\udc3c","text":"<p>Pandas introduit le concept de DataFrame, qui est essentiellement un tableau 2D avec des \u00e9tiquettes.</p> <p>Chargement d'un fichier CSV:</p> <pre><code>df = pd.read_csv('mon_fichier.csv')\nprint(df.head())  # Affiche les 5 premi\u00e8res lignes\n</code></pre> <p>S\u00e9lection de colonnes et de lignes sp\u00e9cifiques:</p> <pre><code>ages = df['Ages']\nalice_data = df[df['Noms'] == 'Alice']\n</code></pre>"},{"location":"14-analyse-de-donnees/#numpy-a-la-rescousse","title":"NumPy \u00e0 la rescousse \u2699\ufe0f","text":"<p>NumPy est essentiel pour les op\u00e9rations num\u00e9riques complexes.</p> <p>Cr\u00e9ation d'un tableau 2D:</p> <pre><code>matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(matrix)\n</code></pre> <p>Op\u00e9rations math\u00e9matiques:</p> <pre><code>print(np.mean(array))  # Calculer la moyenne\nprint(np.median(array))  # M\u00e9diane\n</code></pre>"},{"location":"14-analyse-de-donnees/#nettoyage-et-transformation-des-donnees","title":"Nettoyage et Transformation des Donn\u00e9es \ud83e\uddf9","text":"<p>La qualit\u00e9 des donn\u00e9es est essentielle pour une bonne analyse.</p> <p>Remplacement des valeurs manquantes:</p> <p>Au lieu de simplement supprimer les donn\u00e9es manquantes, nous pouvons les imputer :</p> <pre><code>df['Ages'].fillna(df['Ages'].mean(), inplace=True)  # Remplacer par la moyenne\n</code></pre> <p>Transformation des donn\u00e9es:</p> <p>Par exemple, convertir une colonne de cha\u00eenes de caract\u00e8res en cat\u00e9gories num\u00e9riques:</p> <pre><code>df['Ville_Cat'] = df['Ville'].astype('category').cat.codes\n</code></pre>"},{"location":"14-analyse-de-donnees/#visualisation-avec-pandas-et-matplotlib","title":"Visualisation avec Pandas et Matplotlib \ud83d\udcc9","text":"<p>La visualisation est essentielle pour comprendre vos donn\u00e9es.</p> <pre><code>pip install matplotlib seaborn\n</code></pre> <pre><code>import seaborn as sns\n# Histogramme\ndf['Ages'].hist(edgecolor='black')\n# Diagramme de dispersion\ndf.plot(kind='scatter', x='Ages', y='Ville_Cat')\nsns.pairplot(df, hue='Ville')  # Matrice de dispersion avec Seaborn\n</code></pre>"},{"location":"14-analyse-de-donnees/#exploitation-avancee-des-donnees-avec-groupby","title":"Exploitation avanc\u00e9e des donn\u00e9es avec GroupBy \ud83d\udd04","text":"<p>Pandas permet de regrouper des donn\u00e9es de mani\u00e8re intuitive.</p> <pre><code>grouped = df.groupby('Ville')\nprint(grouped.mean())  # Moyenne d'\u00e2ge par ville\n</code></pre>"},{"location":"14-analyse-de-donnees/#conclusion","title":"Conclusion \ud83d\ude80","text":"<p>Python, avec Pandas et NumPy, est une puissante combinaison pour l'analyse de donn\u00e9es. Ce guide offre un aper\u00e7u, mais l'univers des donn\u00e9es est vaste. Pour ma\u00eetriser ces outils, il est essentiel de s'immerger dans des projets r\u00e9els, de pratiquer continuellement et d'explorer les richesses de la documentation officielle.</p>"},{"location":"15-machine-learning/","title":"Apprentissage Automatique (Machine Learning)","text":"<p>Dans l'univers moderne du big data, Python s'impose comme une r\u00e9f\u00e9rence dans l'apprentissage automatique gr\u00e2ce \u00e0 des biblioth\u00e8ques robustes comme Scikit-learn. Ce guide explorera les nuances de Scikit-learn et sa capacit\u00e9 \u00e0 mod\u00e9liser des ph\u00e9nom\u00e8nes complexes \u00e0 partir de donn\u00e9es.</p>"},{"location":"15-machine-learning/#introduction-a-scikit-learn","title":"Introduction \u00e0 Scikit-learn \ud83d\udcd8","text":"<p>Scikit-learn est un pilier de la mod\u00e9lisation en Python, offrant une interface intuitive pour divers algorithmes, des pr\u00e9-traitements aux m\u00e9thodes d'\u00e9valuation.</p> <p>Installation:</p> <pre><code>pip install scikit-learn\n</code></pre>"},{"location":"15-machine-learning/#preparation-des-donnees-avec-scikit-learn","title":"Pr\u00e9paration des Donn\u00e9es avec Scikit-learn \u2699\ufe0f","text":"<p>Avant toute mod\u00e9lisation, il est crucial de pr\u00e9parer les donn\u00e9es. Scikit-learn propose des outils pour cela.</p> <p>Standardisation:</p> <p>La mise \u00e0 l'\u00e9chelle des donn\u00e9es est souvent n\u00e9cessaire pour que certains algorithmes fonctionnent correctement.</p> <pre><code>from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n</code></pre> <p>Encodage de variables cat\u00e9gorielles:</p> <pre><code>from sklearn.preprocessing import OneHotEncoder\nencoder = OneHotEncoder()\nX_encoded = encoder.fit_transform(X_categorical).toarray()\n</code></pre>"},{"location":"15-machine-learning/#modelisation-avec-scikit-learn","title":"Mod\u00e9lisation avec Scikit-learn \ud83d\udee0\ufe0f","text":"<p>Les algorithmes sont l'\u00e2me de la machine learning, et Scikit-learn en propose une multitude.</p> <p>3. Machines \u00e0 Vecteurs de Support (SVM):</p> <p>Les SVM sont puissants pour la classification et la r\u00e9gression.</p> <pre><code>from sklearn.svm import SVC\nfrom sklearn.metrics import classification_report\nsvm = SVC(kernel='linear')\nsvm.fit(X_train_scaled, y_train)\ny_pred = svm.predict(X_test_scaled)\nprint(classification_report(y_test, y_pred))\n</code></pre> <p>4. Arbres de d\u00e9cision:</p> <p>Ils permettent une classification ou une r\u00e9gression bas\u00e9e sur une structure d'arbre.</p> <pre><code>from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier()\ntree.fit(X_train, y_train)\ny_pred = tree.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Pr\u00e9cision de l'arbre de d\u00e9cision : {accuracy*100:.2f}%\")\n</code></pre>"},{"location":"15-machine-learning/#evaluation-et-optimisation-des-modeles","title":"\u00c9valuation et Optimisation des Mod\u00e8les \ud83c\udfaf","text":"<p>Il ne suffit pas d'entra\u00eener un mod\u00e8le; il faut l'\u00e9valuer et l'optimiser.</p> <p>Validation crois\u00e9e:</p> <p>Permet d'\u00e9valuer les performances d'un mod\u00e8le de mani\u00e8re robuste.</p> <pre><code>from sklearn.model_selection import cross_val_score\nscores = cross_val_score(tree, X_train, y_train, cv=5)\nprint(f\"Scores de validation crois\u00e9e: {scores}\")\nprint(f\"Moyenne: {scores.mean():.2f}\")\n</code></pre> <p>Recherche par grille (Grid Search):</p> <p>Optimise les hyperparam\u00e8tres d'un mod\u00e8le.</p> <pre><code>from sklearn.model_selection import GridSearchCV\nparam_grid = {\n'n_neighbors': [3, 5, 11, 19],\n'weights': ['uniform', 'distance'],\n'metric': ['euclidean', 'manhattan']\n}\ngrid_search = GridSearchCV(KNeighborsClassifier(), param_grid, cv=5)\ngrid_search.fit(X_train, y_train)\n</code></pre>"},{"location":"15-machine-learning/#conclusion","title":"Conclusion \ud83c\udf1f","text":"<p>Scikit-learn est un tr\u00e9sor pour quiconque s'int\u00e9resse au machine learning en Python. Son \u00e9ventail d'outils, allant du pr\u00e9-traitement \u00e0 l'\u00e9valuation, en fait un incontournable. Bien que ce guide couvre les bases, la ma\u00eetrise de Scikit-learn n\u00e9cessite une exploration approfondie et une pratique r\u00e9guli\u00e8re. N'h\u00e9sitez pas \u00e0 plonger dans la documentation officielle pour une exploration plus d\u00e9taill\u00e9e!</p>"},{"location":"16-bonnes-pratiques-et-astuces/","title":"Bonnes Pratiques et Astuces","text":"<p>Python est un langage vaste et polyvalent. \u00c9crire du code qui fonctionne est important, mais veiller \u00e0 ce qu'il soit propre et bien organis\u00e9 est tout aussi essentiel. Allons donc plus loin et approfondissons certaines de ces pratiques.</p>"},{"location":"16-bonnes-pratiques-et-astuces/#style-de-code-pep-8","title":"Style de code (PEP 8) \ud83d\udcdc","text":"<p>PEP 8, le guide officiel de style pour Python, est la boussole pour tout d\u00e9veloppeur Python.</p> <p>Conventions suppl\u00e9mentaires: - Utilisez des docstrings pour documenter les fonctions, les classes et les modules.</p> <pre><code>def ma_fonction():\n\"\"\"Cette fonction fait quelque chose d'important.\"\"\"\npass\n</code></pre> <ul> <li> <p>\u00c9vitez d'utiliser des noms de variables en conflit avec des mots-cl\u00e9s Python, comme <code>list</code> ou <code>str</code>.</p> </li> <li> <p>Utilisez les list comprehensions pour simplifier le code, mais gardez-les lisibles.</p> </li> </ul> <pre><code># Bien\nnombres = [1, 2, 3, 4, 5]\ncarres = [x**2 for x in nombres]\n# Pas bien\ncarres = [x**2 for x in [1, 2, 3, 4, 5]]\n</code></pre>"},{"location":"16-bonnes-pratiques-et-astuces/#journalisation-efficace-logging-et-debugging","title":"Journalisation efficace (Logging) et Debugging \ud83d\udd0d","text":"<p>Niveaux de journalisation:</p> <ul> <li>DEBUG: D\u00e9tails tr\u00e8s granulaires sur l'ex\u00e9cution du programme.</li> <li>INFO: Confirme que les choses fonctionnent comme pr\u00e9vu.</li> <li>WARNING: Indique que quelque chose d'inattendu s'est produit ou pourrait se produire.</li> <li>ERROR: Montre que des erreurs s\u00e9rieuses ont emp\u00each\u00e9 une partie du programme de fonctionner.</li> <li>CRITICAL: Erreurs tr\u00e8s graves qui peuvent emp\u00eacher le programme de fonctionner.</li> </ul> <p>Int\u00e9gration d'un fichier de journalisation:</p> <pre><code>logging.basicConfig(filename='app.log', level=logging.DEBUG)\nlogging.debug(\"Ce message sera \u00e9crit dans 'app.log'\")\n</code></pre> <p>Points d'arr\u00eat (Breakpoints) avec <code>pdb</code>:</p> <p>Dans Python 3.7+, vous pouvez simplement utiliser <code>breakpoint()</code> au lieu de <code>import pdb; pdb.set_trace()</code> pour la m\u00eame fonction.</p> <pre><code>def subtract(x, y):\nbreakpoint()\nreturn x - y\nsubtract(10, 5)  # Utilisez c pour continuer l'ex\u00e9cution ou n pour passer \u00e0 la ligne suivante\n</code></pre>"},{"location":"16-bonnes-pratiques-et-astuces/#gestion-des-exceptions","title":"Gestion des exceptions \ud83d\udeab","text":"<p>G\u00e9rer les erreurs de mani\u00e8re proactive est crucial pour assurer la robustesse de vos applications.</p> <pre><code>try:\nresult = 10 / 0\nexcept ZeroDivisionError:\nprint(\"Vous avez tent\u00e9 de diviser par z\u00e9ro!\")\n</code></pre>"},{"location":"16-bonnes-pratiques-et-astuces/#environnements-virtuels-et-gestion-des-dependances","title":"Environnements Virtuels et Gestion des D\u00e9pendances \ud83c\udf10","text":"<p>Autres outils:</p> <ul> <li>pipenv: Combine <code>pip</code> et <code>venv</code> pour simplifier la gestion des d\u00e9pendances et des environnements.</li> <li>conda: Un gestionnaire d'environnement puissant, particuli\u00e8rement populaire pour la data science.</li> </ul>"},{"location":"16-bonnes-pratiques-et-astuces/#tests-unitaires","title":"Tests Unitaires \u2705","text":"<p>Un bon code est un code test\u00e9. La biblioth\u00e8que int\u00e9gr\u00e9e <code>unittest</code> est un excellent point de d\u00e9part.</p> <pre><code>import unittest\ndef somme(a, b):\nreturn a + b\nclass TestSomme(unittest.TestCase):\ndef test_somme(self):\nself.assertEqual(somme(3, 4), 7)\nif __name__ == \"__main__\":\nunittest.main()\n</code></pre>"},{"location":"16-bonnes-pratiques-et-astuces/#conclusion","title":"Conclusion \ud83c\udf1f","text":"<p>L'\u00e9criture de code est un art et une science. En suivant ces bonnes pratiques et en vous plongeant dans les subtilit\u00e9s de Python, vous ne serez pas seulement un programmeur, mais un artisan du code. Chaque ligne que vous \u00e9crivez refl\u00e9tera votre compr\u00e9hension et votre attention au d\u00e9tail.</p>"},{"location":"17-prochaines-etapes/","title":"Conclusion et Prochaines \u00c9tapes","text":"<p>La ma\u00eetrise de Python, comme tout langage de programmation, n\u00e9cessite \u00e0 la fois une compr\u00e9hension th\u00e9orique et une application pratique. Apr\u00e8s avoir plong\u00e9 profond\u00e9ment dans les concepts essentiels de Python, il est crucial d'aller au-del\u00e0 des bases pour vous forger une exp\u00e9rience r\u00e9elle.</p>"},{"location":"17-prochaines-etapes/#projets-concrets-avec-python","title":"Projets Concrets avec Python \ud83d\udca1","text":"<p>Cr\u00e9er et maintenir des projets est l'une des fa\u00e7ons les plus efficaces de solidifier vos comp\u00e9tences et de d\u00e9couvrir les d\u00e9fis r\u00e9els que l'on rencontre en tant que d\u00e9veloppeur.</p> <p>Autres Id\u00e9es de Projets: 1. Bot de Chat: Utilisez des biblioth\u00e8ques comme <code>chatterbot</code> pour cr\u00e9er un bot de chat interactif. 2. Application de Scrapping Web: Apprenez \u00e0 utiliser <code>BeautifulSoup</code> ou <code>Scrapy</code> pour extraire des informations de sites Web. 3. Un Jeu Simple: Utilisez <code>pygame</code> pour d\u00e9velopper un jeu basique comme Snake ou Tetris. 4. Un Convertisseur de Devises: Exploitez une API pour obtenir des taux de change en temps r\u00e9el et effectuer des conversions.</p>"},{"location":"17-prochaines-etapes/#elargissez-votre-palette-doutils","title":"\u00c9largissez Votre Palette d'Outils \ud83d\udee0","text":"<p>Gestion de Base de Donn\u00e9es avec Python: Pour la gestion de bases de donn\u00e9es, apprenez \u00e0 utiliser <code>SQLAlchemy</code> ou <code>Peewee</code>. Vous pouvez \u00e9galement explorer des bases de donn\u00e9es NoSQL comme MongoDB avec <code>PyMongo</code>.</p> <p>Asynchronous Programming: Avec l'importance croissante des applications I/O-bound, l'asynchronicit\u00e9 est devenue essentielle. Familiarisez-vous avec <code>asyncio</code> et les concepts de <code>async/await</code>.</p>"},{"location":"17-prochaines-etapes/#communaute-et-ressources-dapprentissage-continu","title":"Communaut\u00e9 et Ressources d'Apprentissage Continu \ud83c\udf31","text":"<ul> <li> <p>Podcasts: Des podcasts comme \"Talk Python To Me\" ou \"Python Bytes\" vous permettront de rester \u00e0 jour sur les derni\u00e8res tendances et discussions dans le monde Python.</p> </li> <li> <p>Participation aux Conf\u00e9rences: Des \u00e9v\u00e9nements tels que PyCon ou DjangoCon sont des occasions fantastiques de networking et d'apprentissage.</p> </li> <li> <p>Blogs et Articles: Suivez des blogs influents, comme Real Python ou le blog officiel de Python, pour obtenir des tutoriels et des articles approfondis.</p> </li> </ul>"},{"location":"17-prochaines-etapes/#sengager-dans-la-communaute-open-source","title":"S'engager dans la Communaut\u00e9 Open Source \ud83c\udf10","text":"<p>Le monde de l'open source est vaste. En contribuant, non seulement vous renforcez vos comp\u00e9tences, mais vous donnez \u00e9galement \u00e0 la communaut\u00e9.</p> <p>Quelques suggestions: - Trouvez un projet qui vous passionne: Que ce soit un projet de data science, de d\u00e9veloppement web, ou une simple biblioth\u00e8que, trouvez quelque chose qui vous motive. - Commencez petit: Corrigez des bugs, am\u00e9liorez la documentation, ou ajoutez de petites fonctionnalit\u00e9s. - Rejoignez la conversation: Participez \u00e0 des forums, chats, ou listes de diffusion sp\u00e9cifiques au projet.</p> <p>L'apprentissage de la programmation est un voyage sans fin. Avec Python, un monde de possibilit\u00e9s s'ouvre \u00e0 vous. Continuez d'explorer, de cr\u00e9er, et surtout, n'oubliez jamais de vous amuser en cours de route! \ud83d\ude80\ud83d\udc0d</p>"},{"location":"18-projet-de-fin/","title":"Projet de Fin \u2013 API pour la Gestion \u00c9cologique avec ChatGPT et FastAPI","text":"<p>Objectif: Cr\u00e9er une API qui permet aux utilisateurs de poser des questions sur les d\u00e9chets et le recyclage, et d'obtenir des recommandations bas\u00e9es sur l'IA sur la fa\u00e7on de les traiter de mani\u00e8re \u00e9cologique.</p> <p>\u00c9tape 1 : Configuration et Installation</p> <p>Assurez-vous d'avoir <code>pip</code> install\u00e9. Ensuite:</p> <ol> <li> <p>Installez FastAPI et Uvicorn: <pre><code>pip install fastapi uvicorn\n</code></pre></p> </li> <li> <p>Installez OpenAI Python client: <pre><code>pip install openai\n</code></pre></p> </li> </ol> <p>\u00c9tape 2 : Initialisation de FastAPI</p> <ol> <li>Cr\u00e9ez un nouveau fichier <code>main.py</code>.</li> <li>Initialisez votre application FastAPI: <pre><code>from fastapi import FastAPI, HTTPException\napp = FastAPI()\n</code></pre></li> </ol> <p>\u00c9tape 3 : Int\u00e9gration de ChatGPT</p> <ol> <li>Configurez le client OpenAI avec votre cl\u00e9 API:</li> </ol> <pre><code>import openai\nopenai.api_key = \"YOUR_API_KEY\"\n</code></pre> <ol> <li>Cr\u00e9ez une route FastAPI pour poser des questions \u00e0 ChatGPT: <pre><code>from pydantic import BaseModel\nclass Query(BaseModel):\nquestion: str\n@app.post(\"/query/\")\ndef get_answer(query: Query):\ntry:\nresponse = openai.Completion.create(\nengine=\"davinci\",\nprompt=query.question,\nmax_tokens=150\n)\nreturn {\"response\": response.choices[0].text.strip()}\nexcept Exception as e:\nraise HTTPException(status_code=500, detail=\"Erreur interne du serveur.\")\n</code></pre></li> </ol> <p>\u00c9tape 4 : Ex\u00e9cuter l'API</p> <p>Ex\u00e9cutez votre API avec Uvicorn: <pre><code>uvicorn main:app --reload\n</code></pre></p> <p>Votre serveur devrait maintenant tourner sur <code>http://127.0.0.1:8000/</code></p> <p>\u00c9tape 5 : Test de l'API avec <code>curl</code></p> <ol> <li>Ouvrez un terminal et ex\u00e9cutez la commande suivante:</li> </ol> <pre><code>curl -X 'POST' \\\n'http://127.0.0.1:8000/query/' \\\n-H 'accept: application/json' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"question\": \"Comment puis-je recycler les bouteilles en plastique?\"\n}'\n</code></pre> <ol> <li>Vous devriez recevoir une r\u00e9ponse du serveur semblable \u00e0 :</li> </ol> <pre><code>{\n\"response\": \"Les bouteilles en plastique peuvent \u00eatre recycl\u00e9es en les d\u00e9posant dans le bac de recyclage appropri\u00e9. Assurez-vous de les rincer et de retirer les \u00e9tiquettes. Dans certaines r\u00e9gions, vous pouvez \u00e9galement les ramener en magasin pour obtenir un remboursement. Consultez les directives locales pour plus de d\u00e9tails.\"\n}\n</code></pre> <p>Clap de fin: Vous avez maintenant une API basique qui offre des r\u00e9ponses orient\u00e9es sur la gestion \u00e9cologique des d\u00e9chets. Bien s\u00fbr, ce n'est qu'un d\u00e9but. Vous pouvez \u00e9tendre cette base avec plus de fonctionnalit\u00e9s, comme une authentification, la prise en compte de la localisation de l'utilisateur pour des conseils sp\u00e9cifiques \u00e0 sa r\u00e9gion, etc.</p>"},{"location":"2-bases/","title":"Les bases","text":""},{"location":"2-bases/#syntaxe-et-structure","title":"Syntaxe et Structure \u270d\ufe0f","text":"<p>Python, reconnu pour sa lisibilit\u00e9 et sa simplicit\u00e9, se distingue par sa syntaxe. Pour une initiation r\u00e9ussie, voici les \u00e9l\u00e9ments cl\u00e9s :</p> <ul> <li>Indentation: En Python, l'indentation (espaces ou tabulations) est primordiale pour d\u00e9limiter des blocs de code. Traditionnellement, on utilise quatre espaces pour chaque niveau d'indentation. \u2b05\ufe0f</li> </ul> <pre><code>for i in range(3):\nif i == 2:\nprint(f\"{i} est \u00e9gal \u00e0 2.\")\nelse:\nprint(f\"{i} n'est pas \u00e9gal \u00e0 2.\")\n</code></pre> <ul> <li>Commentaires: Le symbole <code>#</code> introduit un commentaire. Ils sont parfaits pour documenter et clarifier votre code. \ud83d\udca1</li> </ul> <pre><code># Voici une fonction d'accueil\ndef dire_bonjour():\nprint(\"Bonjour tout le monde!\")  # Et voil\u00e0 un autre commentaire !\n</code></pre> <ul> <li>Instructions de fin: En Python, la simplicit\u00e9 prime : oubliez les points-virgules en fin d'instruction. Chaque nouvelle ligne \u00e9quivaut \u00e0 une nouvelle instruction. \ud83d\udcdc</li> </ul>"},{"location":"2-bases/#variables-et-types-de-donnees","title":"Variables et Types de Donn\u00e9es \ud83d\udd22","text":"<ul> <li>D\u00e9claration de variables: Pas besoin de d\u00e9finir le type de la variable en amont. Une simple affectation suffit. \ud83d\udd04</li> </ul> <pre><code>prenom = \"Alice\"\nnombre = 42\n</code></pre> <ul> <li> <p>Types de donn\u00e9es courants: \ud83d\udccc</p> <ul> <li>Entiers (<code>int</code>): Comme le <code>7</code>. Exemple: <code>x = 10</code></li> <li>Flottants (<code>float</code>): Avec des d\u00e9cimales, comme <code>5.7</code>. Exemple: <code>y = 5.7</code></li> <li>Cha\u00eenes de caract\u00e8res (<code>str</code>): Pour le texte. Exemple: <code>z = \"Python est g\u00e9nial!\"</code></li> <li>Listes: Collections modifiables. Exemple: <code>ma_liste = [10, \"Python\", 5.5]</code></li> <li>Dictionnaires: Avec des paires cl\u00e9-valeur. Exemple: <code>mon_dico = {\"langage\": \"Python\", \"version\": 3.9}</code></li> </ul> </li> <li> <p>Typage dynamique: Une variable peut changer de type \u00e0 la vol\u00e9e. \ud83d\udd04</p> </li> </ul> <pre><code>a = 10         # Ici, `a` est un entier\na = \"dix\"      # L\u00e0, `a` est une cha\u00eene\n</code></pre>"},{"location":"2-bases/#operateurs-de-base","title":"Op\u00e9rateurs de base \u2795","text":"<ul> <li> <p>Op\u00e9rateurs arithm\u00e9tiques: Pour les op\u00e9rations math\u00e9matiques.</p> <ul> <li>Addition: <code>3 + 4  # R\u00e9sultat: 7</code></li> <li>Soustraction: <code>7 - 3  # R\u00e9sultat: 4</code></li> <li>Multiplication: <code>4 * 3  # R\u00e9sultat: 12</code></li> <li>... et d'autres que vous avez d\u00e9j\u00e0 \u00e9num\u00e9r\u00e9s.</li> </ul> </li> <li> <p>Op\u00e9rateurs de comparaison: Ils renvoient <code>True</code> ou <code>False</code>.</p> <ul> <li>\u00c9gal \u00e0: <code>4 == 4  # True</code></li> <li>Diff\u00e9rent de: <code>4 != 5  # True</code></li> <li>... et d'autres que vous avez d\u00e9j\u00e0 mentionn\u00e9s.</li> </ul> </li> <li> <p>Op\u00e9rateurs logiques: Pour combiner des conditions. </p> <ul> <li>ET logique: <code>True and False  # R\u00e9sultat: False</code></li> <li>OU logique: <code>True or False  # R\u00e9sultat: True</code></li> <li>NON logique: <code>not True  # R\u00e9sultat: False</code></li> </ul> </li> </ul>"},{"location":"3-controle-flux-iterations/","title":"Contr\u00f4le de flux et It\u00e9ration","text":""},{"location":"3-controle-flux-iterations/#instructions-conditionnelles-if-elif-else","title":"Instructions conditionnelles (if, elif, else) \ud83c\udf10","text":"<p>La prise de d\u00e9cision est fondamentale en programmation. Les instructions conditionnelles vous permettent d'ex\u00e9cuter certains codes en fonction de la validit\u00e9 d'une ou plusieurs conditions.</p> <ul> <li>if: Il s'agit de la condition de base. Si la condition est vraie, le code sous cette condition s'ex\u00e9cute.</li> </ul> <p>\ud83d\udcdd Exemple : <pre><code>age = 18\nif age &gt;= 18:\nprint(\"Vous \u00eates majeur!\")\n</code></pre> Dans cet exemple, le message \"Vous \u00eates majeur!\" s'affiche uniquement si <code>age</code> est sup\u00e9rieur ou \u00e9gal \u00e0 18.</p> <ul> <li>elif: Utilis\u00e9 pour ajouter d'autres conditions apr\u00e8s un <code>if</code>. C'est une mani\u00e8re \u00e9l\u00e9gante d'\u00e9crire une s\u00e9rie de conditions.</li> </ul> <p>\ud83d\udcdd Exemple : <pre><code>note = 85\nif note &gt;= 90:\nprint(\"Excellent!\")\nelif 70 &lt;= note &lt; 90:\nprint(\"Bien jou\u00e9!\")\n</code></pre> Le message \"Bien jou\u00e9!\" s'affichera ici car la note est de 85.</p> <ul> <li>else: Cette instruction capture tout ce qui n'a pas \u00e9t\u00e9 capt\u00e9 par les conditions pr\u00e9c\u00e9dentes.</li> </ul> <p>\ud83d\udcdd Exemple : <pre><code>jour = \"dimanche\"\nif jour == \"samedi\":\nprint(\"C'est le week-end!\")\nelse:\nprint(\"Ce n'est pas samedi.\")\n</code></pre></p>"},{"location":"3-controle-flux-iterations/#boucles-for-et-while","title":"Boucles (for et while) \ud83d\udd04","text":"<p>L'une des forces de la programmation est de r\u00e9p\u00e9ter des t\u00e2ches. Les boucles permettent de r\u00e9aliser ces r\u00e9p\u00e9titions efficacement.</p> <ul> <li>for: Parfait pour parcourir une s\u00e9quence. Il r\u00e9p\u00e8te un bloc pour chaque \u00e9l\u00e9ment d'une s\u00e9quence.</li> </ul> <p>\ud83d\udcdd Exemple : <pre><code>noms = [\"Alice\", \"Bob\", \"Charlie\"]\nfor nom in noms:\nprint(f\"Bonjour, {nom}!\")\n</code></pre> Chaque nom de la liste sera salu\u00e9 par un \"Bonjour\".</p> <ul> <li>while: R\u00e9p\u00e8te un bloc tant qu'une condition est vraie.</li> </ul> <p>\ud83d\udcdd Exemple : <pre><code>compteur = 3\nwhile compteur &gt; 0:\nprint(f\"Compte \u00e0 rebours: {compteur}\")\ncompteur -= 1\n</code></pre> La boucle affiche un compte \u00e0 rebours de 3 \u00e0 1.</p>"},{"location":"3-controle-flux-iterations/#break-continue-et-pass","title":"Break, Continue, et Pass \u23ef","text":"<p>Vous souhaitez avoir un contr\u00f4le plus fin sur vos boucles? Voici trois outils pour cela.</p> <ul> <li>break: C'est l'\u00e9quivalent d'un bouton d'arr\u00eat. Il met fin \u00e0 la boucle imm\u00e9diatement.</li> </ul> <p>\ud83d\udcdd Exemple : <pre><code>for lettre in \"Python\":\nif lettre == \"h\":\nbreak\nprint(lettre)\n# R\u00e9sultat : P, y, t\n</code></pre></p> <ul> <li>continue: Pensez-y comme un bouton \"avance rapide\". Il saute le reste de l'it\u00e9ration en cours.</li> </ul> <p>\ud83d\udcdd Exemple : <pre><code>for lettre in \"Python\":\nif lettre == \"h\":\ncontinue\nprint(lettre)\n# R\u00e9sultat : P, y, t, o, n\n</code></pre></p> <ul> <li>pass: C'est essentiellement un espace r\u00e9serv\u00e9. Utile lorsque vous devez respecter une syntaxe, mais que vous n'avez rien \u00e0 ex\u00e9cuter.</li> </ul> <p>\ud83d\udcdd Exemple : <pre><code>for lettre in \"Python\":\nif lettre == \"h\":\npass\nprint(lettre)\n# R\u00e9sultat : P, y, t, h, o, n\n</code></pre> Le \"h\" est inclus dans le r\u00e9sultat car <code>pass</code> ne fait rien.</p>"},{"location":"4-structures-de-donnees/","title":"Structures de Donn\u00e9es","text":""},{"location":"4-structures-de-donnees/#listes-et-comprehensions-de-liste","title":"Listes et Compr\u00e9hensions de Liste \ud83d\udcdc","text":"<ul> <li>Listes: Une liste est une collection ordonn\u00e9e et modifiable. Les \u00e9l\u00e9ments peuvent varier en type. \ud83d\udc4d</li> </ul> <pre><code>ma_liste = [1, 2, 3, 4, \"python\", 3.14]\n</code></pre> <ul> <li>Acc\u00e8s aux \u00e9l\u00e9ments: Les indices font le lien ! \ud83c\udfaf</li> </ul> <pre><code>premier_element = ma_liste[0]  # R\u00e9sultat: 1\ncinquieme_element = ma_liste[4]  # R\u00e9sultat: \"python\"\n</code></pre> <ul> <li>Modification de la liste: La mutabilit\u00e9 des listes offre une grande flexibilit\u00e9. \ud83d\udd04</li> </ul> <pre><code>ma_liste[4] = \"JAVA\"  # Remplacer \"python\" par \"JAVA\"\nma_liste.extend([7,8])  # Ajouter plusieurs \u00e9l\u00e9ments en une fois\n</code></pre> <ul> <li>Compr\u00e9hensions de liste: Une mani\u00e8re \u00e9l\u00e9gante et rapide de g\u00e9n\u00e9rer des listes. \u2728</li> </ul> <pre><code>impairs = [x for x in range(10) if x % 2 != 0]  # [1, 3, 5, 7, 9]\n</code></pre>"},{"location":"4-structures-de-donnees/#tuples","title":"Tuples \ud83d\udd12","text":"<ul> <li>Tuples: Similaires aux listes, mais immuables. Id\u00e9aux pour des donn\u00e9es constantes. \ud83d\uded1</li> </ul> <pre><code>jours_semaine = (\"Lundi\", \"Mardi\", \"Mercredi\", \"Jeudi\", \"Vendredi\", \"Samedi\", \"Dimanche\")\n</code></pre> <ul> <li>Acc\u00e8s aux \u00e9l\u00e9ments: Comme pour les listes, mais sans modification possible. </li> </ul> <pre><code>jour1 = jours_semaine[0]  # R\u00e9sultat: \"Lundi\"\n</code></pre>"},{"location":"4-structures-de-donnees/#dictionnaires","title":"Dictionnaires \ud83d\udd11","text":"<ul> <li>Dictionnaires: Paires cl\u00e9-valeur pour un stockage organis\u00e9 et efficace. \ud83d\udcd4</li> </ul> <pre><code>personne = {\n\"pr\u00e9nom\": \"Jean\",\n\"nom\": \"Dupont\",\n\"\u00e2ge\": 30,\n\"hobbies\": [\"lecture\", \"cin\u00e9ma\", \"randonn\u00e9e\"]\n}\n</code></pre> <ul> <li>Acc\u00e8s et modification: Gr\u00e2ce aux cl\u00e9s, c'est un jeu d'enfant ! \ud83c\udfb2</li> </ul> <pre><code>nom = personne[\"nom\"]  # R\u00e9sultat: \"Dupont\"\npersonne[\"hobbies\"].append(\"natation\")  # Ajout d'un hobby\n</code></pre> <ul> <li>M\u00e9thodes utiles: Les dictionnaires ont de nombreuses m\u00e9thodes pour faciliter la vie. \ud83e\uddf0</li> </ul> <pre><code>cles = personne.keys()  # Renvoie toutes les cl\u00e9s\nvaleurs = personne.values()  # Renvoie toutes les valeurs\n</code></pre>"},{"location":"4-structures-de-donnees/#ensembles-sets","title":"Ensembles (Sets) \ud83d\udd17","text":"<ul> <li>Sets: Collections d'\u00e9l\u00e9ments uniques. Parfait pour \u00e9liminer les doublons ! \ud83d\udeab</li> </ul> <pre><code>nombres = {1, 2, 3, 3, 4, 4, 5}  # R\u00e9sultat: {1, 2, 3, 4, 5}\n</code></pre> <ul> <li>Op\u00e9rations courantes: Les sets sont id\u00e9aux pour les op\u00e9rations math\u00e9matiques.</li> </ul> <pre><code>A = {1, 2, 3, 4}\nB = {3, 4, 5, 6}\nseulement_A = A.difference(B)  # {1, 2}\n</code></pre> <p>Conseils pratiques: \ud83d\ude80</p> <ul> <li>Pour des donn\u00e9es fixes et immuables, pr\u00e9f\u00e9rez les tuples.</li> <li>Pour stocker des paires cl\u00e9-valeur, utilisez les dictionnaires.</li> <li>Si vous devez \u00e9liminer des doublons d'une liste, convertissez-la en set, puis \u00e0 nouveau en liste.</li> <li>Les compr\u00e9hensions de liste sont puissantes, utilisez-les pour rendre votre code plus pythonique.</li> </ul>"},{"location":"5-fonctions/","title":"Fonctions","text":"<p>Les fonctions sont des outils essentiels en programmation, permettant d'encapsuler du code pour des t\u00e2ches sp\u00e9cifiques. Python regorge de fonctions pr\u00eates \u00e0 l'emploi, mais vous avez aussi la libert\u00e9 de cr\u00e9er les v\u00f4tres.</p>"},{"location":"5-fonctions/#definition-et-appel-de-fonctions","title":"D\u00e9finition et Appel de Fonctions \ud83d\udcdd","text":"<ul> <li>D\u00e9finir une fonction se fait avec le mot-cl\u00e9 <code>def</code>. Pensez-y comme \u00e0 une recette que vous pouvez suivre encore et encore \ud83c\udf6a:</li> </ul> <pre><code>def ma_fonction():\nprint(\"Salut! C'est moi, ta fonction!\")\n</code></pre> <ul> <li>Pour utiliser la recette (fonction), il suffit de l'appeler par son nom:</li> </ul> <pre><code>ma_fonction()  # Affiche: \"Salut! C'est moi, ta fonction!\"\n</code></pre> <ul> <li>Param\u00e8tres: Pensez aux param\u00e8tres comme aux ingr\u00e9dients d'une recette. Ils changent le r\u00e9sultat final \ud83c\udf70:</li> </ul> <pre><code>def cafe(ingredient):\nprint(f\"Voici votre caf\u00e9 avec {ingredient}!\")\ncafe(\"du lait\")  # Affiche: \"Voici votre caf\u00e9 avec du lait!\"\n</code></pre> <ul> <li>Retour de valeur: Parfois, une fonction doit vous donner quelque chose en retour \ud83c\udf81:</li> </ul> <pre><code>def multiplier(x, y):\nreturn x * y\ndouble = multiplier(3, 2)  # double vaut 6\n</code></pre>"},{"location":"5-fonctions/#fonctions-lambda","title":"Fonctions Lambda \u26a1","text":"<p>Les fonctions lambda sont comme des raccourcis. Rapides et efficaces pour de petites t\u00e2ches:</p> <pre><code>inverse = lambda x: 1/x\nprint(inverse(2))  # Affiche: 0.5\n</code></pre>"},{"location":"5-fonctions/#fonctions-integrees","title":"Fonctions Int\u00e9gr\u00e9es \ud83d\udd27","text":"<p>Python est comme une bo\u00eete \u00e0 outils g\u00e9ante avec toutes sortes d'outils pr\u00e9fabriqu\u00e9s:</p> <ul> <li><code>print()</code>: Votre outil pour envoyer des messages:</li> </ul> <pre><code>print(\"Salut, monde!\")  # \ud83c\udf0d\n</code></pre> <ul> <li><code>len()</code>: Mesurez tout ce qui est mesurable, comme les cha\u00eenes de caract\u00e8res:</li> </ul> <pre><code>taille = len(\"Chat\")  # taille vaut 4 \ud83d\udc31\n</code></pre> <ul> <li><code>type()</code>: Quel genre d'outil avez-vous l\u00e0?</li> </ul> <pre><code>typ = type(True)  # typ vaut &lt;class 'bool'&gt; \ud83d\udea6\n</code></pre> <ul> <li>Conversions: Transformer un outil en un autre:</li> </ul> <pre><code>texte = str(456)  # texte vaut \"456\" \ud83d\udcdc\nsequence = list(\"abc\")  # sequence vaut ['a', 'b', 'c'] \ud83d\udccb\n</code></pre> <ul> <li>Cr\u00e9ations: Fabriquer des structures de donn\u00e9es:</li> </ul> <pre><code>mon_set = set([1, 1, 2, 3])  # mon_set vaut {1, 2, 3} \ud83e\uddf1\n</code></pre> <p>Pensez aux fonctions int\u00e9gr\u00e9es comme \u00e0 des amis qui sont toujours l\u00e0 pour vous aider ! \ud83d\ude0a</p>"},{"location":"6-modules-et-paquets/","title":"Modules et Paquets","text":"<p>En programmation Python, un module est un fichier contenant des d\u00e9finitions et des instructions Python. Le fichier nomm\u00e9 <code>module.py</code> a le nom de module <code>module</code> que vous pouvez utiliser dans un script Python avec le mot-cl\u00e9 <code>import</code>. Un paquet est une mani\u00e8re d'organiser des modules connexes dans un r\u00e9pertoire.</p>"},{"location":"6-modules-et-paquets/#quest-ce-que-sont-les-modules-et-les-paquets","title":"Qu'est-ce que sont les Modules et les Paquets? \ud83e\udde9","text":"<ul> <li>Modules \ud83d\udcc4: Un module est essentiellement un fichier contenant du code Python. Il peut d\u00e9finir des fonctions, des classes et des variables, et peut \u00e9galement inclure du code ex\u00e9cutable.</li> </ul> <p>Exemple: <code>mon_module.py</code></p> <ul> <li>Paquets \ud83d\udcc1: Un paquet est un moyen d'organiser plusieurs modules en un seul r\u00e9pertoire. Ce r\u00e9pertoire contient un fichier sp\u00e9cial appel\u00e9 <code>__init__.py</code> pour indiquer \u00e0 Python que le r\u00e9pertoire doit \u00eatre trait\u00e9 comme un paquet.</li> </ul> <p>Structure d'un paquet:   <pre><code>mon_paquet/\n\u251c\u2500 __init__.py\n\u251c\u2500 module1.py\n\u2514\u2500 module2.py\n</code></pre></p>"},{"location":"6-modules-et-paquets/#importer-des-modules","title":"Importer des Modules \ud83d\udd04","text":"<ul> <li> <p>Importation d'un module:   <pre><code>import mon_module\n</code></pre>   Apr\u00e8s cette importation, vous pouvez acc\u00e9der aux fonctions ou variables d\u00e9finies dans <code>mon_module</code> avec <code>mon_module.nom_fonction</code>.</p> </li> <li> <p>Alias lors de l'importation \ud83c\udff7:   <pre><code>import mon_module as mm\n</code></pre></p> </li> <li> <p>Importer des \u00e9l\u00e9ments sp\u00e9cifiques d'un module \u2699:   <pre><code>from mon_module import ma_fonction\n</code></pre></p> </li> </ul>"},{"location":"6-modules-et-paquets/#explorer-la-bibliotheque-standard-python","title":"Explorer la Biblioth\u00e8que Standard Python \ud83d\udcda","text":"<p>La biblioth\u00e8que standard Python offre une collection impressionnante de modules pr\u00eats \u00e0 l'emploi. Voici quelques modules couramment utilis\u00e9s:</p> <ul> <li> <p><code>math</code> \ud83e\uddee: Fonctions math\u00e9matiques.   <pre><code>import math\nangle = math.radians(180)  # Convertit les degr\u00e9s en radians\n</code></pre></p> </li> <li> <p><code>datetime</code> \u23f0: Manipulation des dates et des temps.   <pre><code>from datetime import timedelta\nune_semaine = timedelta(days=7)\n</code></pre></p> </li> <li> <p><code>os</code> \ud83d\udcbd: Interaction avec le syst\u00e8me d'exploitation.   <pre><code>import os\nliste_fichiers = os.listdir('.')  # Liste tous les fichiers du r\u00e9pertoire courant\n</code></pre></p> </li> <li> <p><code>sys</code> \ud83d\udda5: Interagit avec l'interpr\u00e9teur Python.   <pre><code>import sys\nversion = sys.version  # R\u00e9cup\u00e8re la version de Python en cours d'ex\u00e9cution\n</code></pre></p> </li> <li> <p><code>json</code> \ud83d\udcdc: Encodage et d\u00e9codage du format JSON.   <pre><code>import json\ndonnees = json.dumps({\"nom\": \"Jean\", \"age\": 30})  # Convertit un dictionnaire en cha\u00eene JSON\n</code></pre></p> </li> <li> <p><code>random</code> \ud83c\udfb2: G\u00e9n\u00e8re des nombres al\u00e9atoires.   <pre><code>import random\nnombre = random.randint(1, 10)  # G\u00e9n\u00e8re un nombre al\u00e9atoire entre 1 et 10\n</code></pre></p> </li> </ul> <p>Ces modules ne sont qu'un petit aper\u00e7u de ce que la biblioth\u00e8que standard a \u00e0 offrir. Elle est vaste et couvre presque tous les domaines imaginables, faisant de Python un outil puissant d\u00e8s l'installation.</p>"},{"location":"7-manipulation-de-fichiers/","title":"Manipulation de Fichiers","text":"<p>En Python, travailler avec des fichiers est un jeu d'enfant! Que ce soit des fichiers texte, des CSV, des JSON, ou des XML, Python vous a couvert.</p>"},{"location":"7-manipulation-de-fichiers/#lire-et-ecrire-des-fichiers","title":"Lire et \u00c9crire des Fichiers \ud83d\udcc4","text":"<ul> <li>Ouvrir un fichier \ud83d\udeaa: Utilisez la fonction <code>open()</code>. Par d\u00e9faut, le fichier est ouvert en mode lecture ('r').</li> </ul> <pre><code>f = open(\"mon_fichier.txt\", \"r\")\n</code></pre> <ul> <li> <p>Lire un fichier \ud83d\udcd6:</p> </li> <li> <p><code>read()</code>: Pour absorber l'int\u00e9gralit\u00e9 du fichier.</p> </li> </ul> <pre><code>contenu = f.read()\nprint(contenu)\n</code></pre> <ul> <li><code>readline()</code>: Si vous voulez juste un petit go\u00fbt, soit une ligne.</li> </ul> <pre><code>premiere_ligne = f.readline()\nprint(premiere_ligne)\n</code></pre> <ul> <li><code>readlines()</code>: Pour d\u00e9vorer toutes les lignes sous forme de liste.</li> </ul> <pre><code>toutes_les_lignes = f.readlines()\nfor ligne in toutes_les_lignes:\nprint(ligne)\n</code></pre> <ul> <li>\u00c9crire dans un fichier \u270d\ufe0f: Ouvrez le fichier en mode \u00e9criture ('w'). Prenez garde, cela pourrait remplacer ce qui existait d\u00e9j\u00e0!</li> </ul> <pre><code>f = open(\"mon_fichier.txt\", \"w\")\nf.write(\"Bonjour, monde!\")\n</code></pre> <ul> <li>Fermer un fichier \ud83d\udd10: C'est comme \u00e9teindre la lumi\u00e8re en quittant une pi\u00e8ce. C'est une bonne pratique!</li> </ul> <pre><code>f.close()\n</code></pre> <ul> <li>Utiliser <code>with</code> \ud83e\udd1d: Elle est la meilleure amie des programmeurs. Elle prend soin du fichier et le ferme automatiquement pour vous.</li> </ul> <pre><code>with open(\"mon_fichier.txt\", \"r\") as f:\ncontenu = f.read()\nprint(contenu)\n</code></pre>"},{"location":"7-manipulation-de-fichiers/#jongler-avec-les-donnees-csv-json-et-xml","title":"Jongler avec les donn\u00e9es CSV, JSON et XML \ud83d\udd04","text":"<ul> <li>CSV (Comma-Separated Values) \ud83d\udccb:</li> </ul> <p>Python poss\u00e8de une bo\u00eete \u00e0 outils int\u00e9gr\u00e9e nomm\u00e9e <code>csv</code>.</p> <ul> <li> <p>Lire un CSV \ud83d\udcdc:</p> <pre><code>import csv\nwith open('mon_fichier.csv', mode ='r')as fichier:\nlecteur_csv = csv.reader(fichier)\nfor ligne in lecteur_csv:\nprint(\", \".join(ligne))\n</code></pre> </li> <li> <p>\u00c9crire dans un CSV \ud83d\udd8a:</p> <pre><code>donnees = [[\"nom\", \"age\"], [\"Jean\", 30], [\"Marie\", 25]]\nwith open('mon_fichier.csv', mode ='w')as fichier:\necrivain = csv.writer(fichier)\necrivain.writerows(donnees)\n</code></pre> </li> <li> <p>JSON (JavaScript Object Notation) \ud83e\uddec:</p> </li> </ul> <p>Avec le module <code>json</code>, transformer des objets Python en JSON et vice versa est un jeu d'enfant.</p> <ul> <li> <p>Lire un JSON \ud83e\uddd0:</p> <pre><code>import json\nwith open('mon_fichier.json', 'r') as fichier:\ndonnees = json.load(fichier)\nprint(donnees)\n</code></pre> </li> <li> <p>\u00c9crire dans un JSON \ud83c\udfa8:</p> <pre><code>personne = {\"nom\": \"Jean\", \"age\": 30, \"ville\": \"Paris\"}\nwith open('mon_fichier.json', 'w') as fichier:\njson.dump(personne, fichier, indent=4)\n</code></pre> </li> <li> <p>XML (eXtensible Markup Language) \ud83c\udf10:</p> </li> </ul> <p><code>xml.etree.ElementTree</code> est comme votre GPS pour naviguer \u00e0 travers les fichiers XML.</p> <ul> <li> <p>Lire un XML \ud83d\uddfa:</p> <pre><code>import xml.etree.ElementTree as ET\narbre = ET.parse('mon_fichier.xml')\nracine = arbre.getroot()\nfor elem in racine:\nprint(elem.tag, \"-\", elem.text)\n</code></pre> </li> <li> <p>\u00c9crire dans un XML \ud83c\udfd7:</p> <pre><code>import xml.etree.ElementTree as ET\nracine = ET.Element(\"personnes\")\npersonne = ET.SubElement(racine, \"personne\", attrib={\"id\": \"1\"})\nET.SubElement(personne, \"nom\").text = \"Jean\"\nET.SubElement(personne, \"age\").text = \"30\"\narbre = ET.ElementTree(racine)\narbre.write(\"mon_fichier.xml\")\n</code></pre> </li> </ul> <p>Voil\u00e0 une plong\u00e9e enrichie dans la manipulation de fichiers avec Python!</p>"},{"location":"8-programmation-orientee-objet/","title":"Programmation Orient\u00e9e Objet (POO)","text":"<p>La POO est une m\u00e9thode de programmation qui traite des programmes comme des collections d'objets interagissant les uns avec les autres, plut\u00f4t que comme des s\u00e9quences d'instructions \u00e0 ex\u00e9cuter.</p>"},{"location":"8-programmation-orientee-objet/#introduction-a-la-poo","title":"Introduction \u00e0 la POO \ud83c\udf1f","text":"<p>La POO est n\u00e9e de la n\u00e9cessit\u00e9 de g\u00e9rer de grands programmes et de r\u00e9duire leur complexit\u00e9. Elle offre une mani\u00e8re structur\u00e9e de repr\u00e9senter le monde r\u00e9el dans un programme, en le d\u00e9composant en objets ayant des attributs (caract\u00e9ristiques) et des m\u00e9thodes (actions).</p>"},{"location":"8-programmation-orientee-objet/#classes-et-objets","title":"Classes et Objets \ud83c\udfeb","text":"<ul> <li>Classe: Pensez \u00e0 la classe comme \u00e0 un plan. Il d\u00e9finit les attributs et les m\u00e9thodes n\u00e9cessaires pour cr\u00e9er un objet.</li> </ul> <pre><code>class Animal:\ndef __init__(self, espece, nom):\nself.espece = espece\nself.nom = nom\ndef parler(self):\nprint(f\"Je suis un {self.espece} et je m'appelle {self.nom}.\")\n</code></pre> <ul> <li>Objet: L'objet est une instance de la classe, avec des valeurs r\u00e9elles.</li> </ul> <pre><code>chien = Animal(\"chien\", \"Buddy\")\nchien.parler()  # Affiche: \"Je suis un chien et je m'appelle Buddy.\"\n</code></pre>"},{"location":"8-programmation-orientee-objet/#heritage-et-polymorphisme","title":"H\u00e9ritage et Polymorphisme \ud83c\udf32","text":"<ul> <li>H\u00e9ritage: Permet \u00e0 une nouvelle classe d'h\u00e9riter des propri\u00e9t\u00e9s et m\u00e9thodes d'une classe existante.</li> </ul> <pre><code>class Oiseau(Animal):\ndef __init__(self, nom, peut_voler=True):\nsuper().__init__(\"oiseau\", nom)\nself.peut_voler = peut_voler\ndef voler(self):\nif self.peut_voler:\nprint(f\"{self.nom} vole dans le ciel!\")\nelse:\nprint(f\"{self.nom} ne peut pas voler.\")\n</code></pre> <ul> <li>Polymorphisme: Offre une interface unique pour des types diff\u00e9rents, ce qui permet d'utiliser des objets de diff\u00e9rentes classes de mani\u00e8re interchangeable.</li> </ul> <pre><code>chat = Animal(\"chat\", \"Whiskers\")\ndef presenter_animal(animal):\nanimal.parler()\npresenter_animal(chien)\npresenter_animal(Oiseau(\"Polly\"))\n</code></pre>"},{"location":"8-programmation-orientee-objet/#encapsulation-et-abstraction","title":"Encapsulation et Abstraction \ud83d\udce6","text":"<ul> <li>Encapsulation: Cela permet de masquer les d\u00e9tails internes d'un objet, ne montrant que ce qui est n\u00e9cessaire.</li> </ul> <pre><code>class Banque:\ndef __init__(self):\nself.__balance = 0\ndef deposer(self, montant):\nself.__balance += montant\nprint(f\"Vous avez d\u00e9pos\u00e9 {montant}\u20ac. Solde actuel: {self.__balance}\u20ac.\")\ndef retirer(self, montant):\nif montant &gt; self.__balance:\nprint(\"Solde insuffisant!\")\nelse:\nself.__balance -= montant\nprint(f\"Vous avez retir\u00e9 {montant}\u20ac. Solde actuel: {self.__balance}\u20ac.\")\n</code></pre> <ul> <li>Abstraction: Il s'agit de cr\u00e9er un mod\u00e8le simple qui retire les d\u00e9tails complexes. En utilisant l'abstraction, vous pouvez cacher la complexit\u00e9 et ne montrer que les fonctionnalit\u00e9s essentielles.</li> </ul> <pre><code>class AppareilElectronique:\ndef allumer(self):\npass\ndef eteindre(self):\npass\n# Ici, les m\u00e9thodes exactes pour allumer/\u00e9teindre ne sont pas d\u00e9finies. Ce sera le travail des classes qui h\u00e9riteront de cette classe.\n</code></pre> <p>La POO offre une approche solide et modulaire pour construire des programmes, faciliter leur maintenance et am\u00e9liorer la r\u00e9utilisabilit\u00e9 du code. C'est comme construire avec des LEGOs: chaque pi\u00e8ce (ou objet) a sa propre structure et fonctionnalit\u00e9, et vous pouvez les combiner de mani\u00e8re cr\u00e9ative pour cr\u00e9er quelque chose de grand! \ud83c\udf06</p>"},{"location":"9-erreurs-et-exceptions/","title":"Gestion des Erreurs et Exceptions","text":"<p>La robustesse d'un programme r\u00e9side souvent dans sa capacit\u00e9 \u00e0 g\u00e9rer les impr\u00e9vus. Python fournit des outils puissants pour traiter et anticiper les erreurs \u00e0 travers le m\u00e9canisme d'exceptions.</p>"},{"location":"9-erreurs-et-exceptions/#comprendre-les-erreurs-et-exceptions","title":"Comprendre les Erreurs et Exceptions \ud83d\udca1","text":"<ul> <li> <p>Erreur (Bug): Il s'agit d'un d\u00e9faut dans le code. Par exemple, une variable non d\u00e9finie.</p> </li> <li> <p>Exception: C'est un \u00e9v\u00e9nement qui se produit pendant l'ex\u00e9cution du programme et qui interrompt le flux normal d'instructions.</p> </li> </ul>"},{"location":"9-erreurs-et-exceptions/#blocs-try-except-else-et-finally","title":"Blocs Try, Except, Else et Finally \ud83d\uded1","text":"<ul> <li> <p>Bloc <code>try</code>: Contient le code susceptible de g\u00e9n\u00e9rer une exception.</p> </li> <li> <p>Bloc <code>except</code>: G\u00e8re l'exception si elle est lev\u00e9e dans le bloc <code>try</code>.</p> </li> <li> <p>Bloc <code>else</code>: Ce bloc est ex\u00e9cut\u00e9 si aucune exception n'est lev\u00e9e dans le bloc <code>try</code>.</p> </li> <li> <p>Bloc <code>finally</code>: Ex\u00e9cut\u00e9 toujours \u00e0 la fin, qu'une exception soit lev\u00e9e ou non.</p> </li> </ul> <pre><code>try:\nresultat = int(input(\"Entrez un nombre: \")) / 2\nexcept ValueError:\nprint(\"Veuillez entrer un nombre valide!\")\nelse:\nprint(f\"La moiti\u00e9 de votre nombre est {resultat}.\")\nfinally:\nprint(\"Merci d'avoir particip\u00e9!\")\n</code></pre>"},{"location":"9-erreurs-et-exceptions/#types-courants-dexceptions","title":"Types courants d'Exceptions \ud83d\udccc","text":"<p>Python poss\u00e8de de nombreuses exceptions int\u00e9gr\u00e9es comme:</p> <ul> <li><code>ValueError</code>: Lorsqu'une fonction re\u00e7oit un argument de valeur correcte mais de type inappropri\u00e9.</li> <li><code>TypeError</code>: Lorsque une op\u00e9ration est appliqu\u00e9e au type inappropri\u00e9.</li> <li><code>FileNotFoundError</code>: Lorsqu'un fichier ou un r\u00e9pertoire est demand\u00e9 mais n'existe pas.</li> </ul>"},{"location":"9-erreurs-et-exceptions/#levee-dexceptions","title":"Lev\u00e9e d'Exceptions \ud83d\ude80","text":"<p>Le mot-cl\u00e9 <code>raise</code> permet de lancer une exception sp\u00e9cifique, ce qui peut \u00eatre utile pour signaler des erreurs dans votre propre code.</p> <pre><code>age = int(input(\"Quel est votre \u00e2ge? \"))\nif age &lt; 0:\nraise ValueError(\"L'\u00e2ge ne peut pas \u00eatre n\u00e9gatif!\")\n</code></pre>"},{"location":"9-erreurs-et-exceptions/#assertions","title":"Assertions \u26d4","text":"<p>Les assertions sont un outil de d\u00e9bogage, elles testent une condition et d\u00e9clenchent une exception si la condition est fausse.</p> <pre><code>age = int(input(\"Entrez votre \u00e2ge: \"))\nassert age &gt;= 0, \"L'\u00e2ge ne peut pas \u00eatre n\u00e9gatif!\"\n</code></pre>"},{"location":"9-erreurs-et-exceptions/#exceptions-personnalisees","title":"Exceptions Personnalis\u00e9es \ud83c\udfa8","text":"<p>La cr\u00e9ation d'exceptions personnalis\u00e9es peut aider \u00e0 clarifier votre code et \u00e0 traiter des cas sp\u00e9cifiques.</p> <pre><code>class AgeNegatif(Exception):\n\"\"\"Exception lev\u00e9e pour un \u00e2ge n\u00e9gatif.\"\"\"\npass\nage = int(input(\"Entrez votre \u00e2ge: \"))\nif age &lt; 0:\nraise AgeNegatif(\"L'\u00e2ge ne peut pas \u00eatre n\u00e9gatif!\")\n</code></pre> <p>La gestion des erreurs est essentielle pour la robustesse d'un programme. La capacit\u00e9 de pr\u00e9voir, g\u00e9rer et communiquer les erreurs rend un programme plus fiable et plus convivial.</p>"}]}