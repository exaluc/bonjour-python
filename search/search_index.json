{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accueil","text":"<p>\ud83d\udc0d Bienvenue dans le monde fascinant de Python ! \ud83c\udf0d</p> <p>Salut et bienvenue \u00e0 toi, futur codeur Python ! Tu es sur le point d'entamer un voyage passionnant \u00e0 travers l'un des langages de programmation les plus populaires et les plus aim\u00e9s au monde.</p> <p>Pourquoi Python ? Parce qu'il est simple, \u00e9l\u00e9gant et incroyablement puissant. Que tu souhaites analyser des donn\u00e9es, construire des applications web, ou m\u00eame plonger dans le monde myst\u00e9rieux de l'intelligence artificielle, Python est le choix id\u00e9al.</p> <p>Mais avant de plonger t\u00eate baiss\u00e9e, prenons un moment pour nous d\u00e9tendre et comprendre le chemin qui nous attend. \ud83d\udee4\ufe0f Chaque section de ce cours a \u00e9t\u00e9 soigneusement con\u00e7ue pour te guider \u00e9tape par \u00e9tape, de la d\u00e9couverte des bases \u00e0 l'exploration de concepts avanc\u00e9s. N'h\u00e9site pas \u00e0 progresser \u00e0 ton propre rythme et \u00e0 profiter de chaque instant d'apprentissage.</p> <p>N'oublie pas : chaque codeur, m\u00eame le plus exp\u00e9riment\u00e9, a commenc\u00e9 par \u00eatre un d\u00e9butant. Alors, respire profond\u00e9ment, garde l'esprit ouvert, et surtout, amuse-toi ! \ud83d\udca1\ud83d\ude80</p> <p>Accroche-toi bien, car notre aventure Python commence... maintenant ! \ud83d\ude80\ud83d\udc0d</p>"},{"location":"1-introduction/","title":"Introduction","text":""},{"location":"1-introduction/#introduction-a-python","title":"Introduction \u00e0 Python","text":""},{"location":"1-introduction/#quest-ce-que-python","title":"Qu'est-ce que Python ?","text":"<p>Python est un langage de programmation interpr\u00e9t\u00e9, haut niveau et orient\u00e9 objet. Il a \u00e9t\u00e9 cr\u00e9\u00e9 par Guido van Rossum et a \u00e9t\u00e9 lanc\u00e9 pour la premi\u00e8re fois en 1991. Sa conception simple et sa syntaxe lisible le rendent parfait pour les d\u00e9butants en programmation. Il est utilis\u00e9 dans divers domaines tels que le d\u00e9veloppement web, la science des donn\u00e9es, l'intelligence artificielle, l'automatisation, et bien d'autres.</p>"},{"location":"1-introduction/#pourquoi-choisir-python","title":"Pourquoi choisir Python ?","text":"<ol> <li>Facilit\u00e9 d'apprentissage : Sa syntaxe claire et sa nature interpr\u00e9t\u00e9e le rendent id\u00e9al pour les d\u00e9butants.</li> <li>Polyvalent : Python est utilis\u00e9 dans le d\u00e9veloppement web, l'analyse de donn\u00e9es, l'automatisation, le d\u00e9veloppement de jeux, etc.</li> <li>Communaut\u00e9 : Python poss\u00e8de une large communaut\u00e9, ce qui signifie que vous pouvez trouver une abondance de ressources, de biblioth\u00e8ques et de frameworks.</li> <li>Performance : Bien que Python soit interpr\u00e9t\u00e9 et g\u00e9n\u00e9ralement plus lent que les langages compil\u00e9s, des outils tels que PyPy peuvent am\u00e9liorer sa performance.</li> <li>Interop\u00e9rabilit\u00e9 : Python peut \u00eatre facilement int\u00e9gr\u00e9 avec d'autres langages tels que C et C++.</li> </ol>"},{"location":"1-introduction/#installation-de-python-et-configuration-de-lenvironnement","title":"Installation de Python et configuration de l'environnement","text":"<ol> <li> <p>T\u00e9l\u00e9chargement : Rendez-vous sur le site officiel de Python pour t\u00e9l\u00e9charger la derni\u00e8re version de Python. Choisissez la version adapt\u00e9e \u00e0 votre syst\u00e8me d'exploitation (Windows, MacOS, Linux).</p> </li> <li> <p>Installation :</p> <ul> <li>Windows : Lancez l'ex\u00e9cutable t\u00e9l\u00e9charg\u00e9 et suivez les instructions. Assurez-vous de cocher la case \"Add Python to PATH\" lors de l'installation.</li> <li>MacOS : Ouvrez le package t\u00e9l\u00e9charg\u00e9 et suivez les instructions.</li> <li>Linux : Python est g\u00e9n\u00e9ralement pr\u00e9install\u00e9 sur la plupart des distributions Linux. Cependant, vous pouvez \u00e9galement l'installer via le gestionnaire de paquets de votre distribution.</li> </ul> </li> <li> <p>V\u00e9rification : Pour v\u00e9rifier que Python a \u00e9t\u00e9 correctement install\u00e9, ouvrez un terminal ou une invite de commande et tapez <code>python --version</code>. Cela devrait afficher la version de Python que vous avez install\u00e9e.</p> </li> <li> <p>Configurer l'environnement virtuel (optionnel) : </p> <ul> <li>Installez <code>virtualenv</code> en utilisant pip: <code>pip install virtualenv</code></li> <li>Cr\u00e9ez un nouvel environnement virtuel : <code>virtualenv mon_environnement</code></li> <li>Activez l'environnement : <ul> <li>Windows : <code>mon_environnement\\Scripts\\activate</code></li> <li>MacOS/Linux : <code>source mon_environnement/bin/activate</code></li> </ul> </li> <li>Pour d\u00e9sactiver l'environnement, tapez simplement <code>deactivate</code>.</li> </ul> </li> </ol>"},{"location":"10-concepts-avances/","title":"Concepts avanc\u00e9s","text":""},{"location":"10-concepts-avances/#concepts-avances-en-python","title":"Concepts Avanc\u00e9s en Python","text":""},{"location":"10-concepts-avances/#iterateurs-et-generateurs","title":"It\u00e9rateurs et G\u00e9n\u00e9rateurs","text":"<ul> <li>It\u00e9rateurs: En Python, un it\u00e9rateur est un objet qui impl\u00e9mente les m\u00e9thodes <code>__iter__()</code> et <code>__next__()</code>. Les it\u00e9rateurs permettent aux objets d'\u00eatre it\u00e9r\u00e9s (parcourus) en utilisant une boucle <code>for</code>.</li> </ul> <pre><code>class MonIterateur:\ndef __init__(self, max):\nself.max = max\ndef __iter__(self):\nself.n = 0\nreturn self\ndef __next__(self):\nif self.n &lt;= self.max:\nresult = 2 ** self.n\nself.n += 1\nreturn result\nelse:\nraise StopIteration\nmon_iter = MonIterateur(3)\nfor num in mon_iter:\nprint(num)\n</code></pre> <ul> <li>G\u00e9n\u00e9rateurs: Les g\u00e9n\u00e9rateurs sont des fonctions qui retournent un objet qui peut \u00eatre parcouru. Ils sont d\u00e9finis comme des fonctions normales, mais utilisent le mot-cl\u00e9 <code>yield</code> pour retourner des donn\u00e9es.</li> </ul> <pre><code>def mon_generateur(max):\nn = 0\nwhile n &lt; max:\nyield 2 ** n\nn += 1\nfor num in mon_generateur(4):\nprint(num)\n</code></pre>"},{"location":"10-concepts-avances/#decorateurs","title":"D\u00e9corateurs","text":"<p>Les d\u00e9corateurs sont une mani\u00e8re puissante de modifier ou d'\u00e9tendre le comportement des fonctions ou des m\u00e9thodes sans changer leur code source.</p> <pre><code>def mon_decorateur(fonction):\ndef wrapper():\nprint(\"Quelque chose est ex\u00e9cut\u00e9 avant la fonction.\")\nfonction()\nprint(\"Quelque chose est ex\u00e9cut\u00e9 apr\u00e8s la fonction.\")\nreturn wrapper\n@mon_decorateur\ndef dire_bonjour():\nprint(\"Bonjour!\")\ndire_bonjour()\n</code></pre>"},{"location":"10-concepts-avances/#metaclasses","title":"M\u00e9taclasses","text":"<p>Les m\u00e9taclasses sont \"des classes de classes\". Elles d\u00e9finissent comment une classe se comporte. Une classe est en r\u00e9alit\u00e9 une instance d'une m\u00e9tclasse.</p> <pre><code>class MaMetaclasse(type):\ndef __new__(cls, nom, bases, dct):\ndct['ajout'] = \"Nouvel attribut ajout\u00e9\"\nreturn super().__new__(cls, nom, bases, dct)\nclass MaClasse(metaclass=MaMetaclasse):\npass\nprint(MaClasse.ajout)  # Affiche: \"Nouvel attribut ajout\u00e9\"\n</code></pre> <p>Ces concepts avanc\u00e9s en Python peuvent sembler d\u00e9routants au d\u00e9but, mais ils sont essentiels pour \u00e9crire du code Python efficace et modulaire, surtout dans des projets complexes ou des biblioth\u00e8ques de code.</p>"},{"location":"11-bases-de-donnees/","title":"Travailler avec des bases de donn\u00e9es","text":""},{"location":"11-bases-de-donnees/#travailler-avec-des-bases-de-donnees-en-python","title":"Travailler avec des Bases de Donn\u00e9es en Python","text":""},{"location":"11-bases-de-donnees/#sqlite-et-python","title":"SQLite et Python","text":"<p>SQLite est une base de donn\u00e9es relationnelle int\u00e9gr\u00e9e \u00e0 Python. Il n'est pas n\u00e9cessaire d'installer de modules externes pour l'utiliser.</p> <p>Exemple d'utilisation de SQLite en Python:</p> <pre><code>import sqlite3\n# Se connecter \u00e0 une base de donn\u00e9es (ou la cr\u00e9er si elle n'existe pas)\nconnexion = sqlite3.connect('ma_base_de_donnees.db')\n# Cr\u00e9er une table\ncurseur = connexion.cursor()\ncurseur.execute(\"\"\"\nCREATE TABLE IF NOT EXISTS utilisateurs (\n    id INTEGER PRIMARY KEY,\n    nom TEXT,\n    age INTEGER\n)\n\"\"\")\n# Ins\u00e9rer des donn\u00e9es\ncurseur.execute(\"INSERT INTO utilisateurs (nom, age) VALUES (?, ?)\", (\"Alice\", 30))\n# Valider les modifications\nconnexion.commit()\n# Fermer la connexion\nconnexion.close()\n</code></pre>"},{"location":"11-bases-de-donnees/#introduction-aux-requetes-sql-en-python","title":"Introduction aux Requ\u00eates SQL en Python","text":"<p>On peut ex\u00e9cuter n'importe quelle requ\u00eate SQL en Python gr\u00e2ce au module <code>sqlite3</code>:</p> <pre><code>connexion = sqlite3.connect('ma_base_de_donnees.db')\ncurseur = connexion.cursor()\n# S\u00e9lectionner des donn\u00e9es\ncurseur.execute(\"SELECT * FROM utilisateurs\")\nutilisateurs = curseur.fetchall()\nfor utilisateur in utilisateurs:\nprint(utilisateur)\nconnexion.close()\n</code></pre>"},{"location":"11-bases-de-donnees/#orms-comme-sqlalchemy","title":"ORMs comme SQLAlchemy","text":"<p>Un ORM (Object-Relational Mapping) permet de travailler avec des bases de donn\u00e9es en utilisant la POO. SQLAlchemy est l'un des ORM les plus populaires en Python.</p> <p>Exemple basique d'utilisation de SQLAlchemy:</p> <pre><code>from sqlalchemy import create_engine, Column, Integer, String, Sequence\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nBase = declarative_base()\nclass Utilisateur(Base):\n__tablename__ = 'utilisateurs'\nid = Column(Integer, Sequence('utilisateur_id_seq'), primary_key=True)\nnom = Column(String(50))\nage = Column(Integer)\n# Connecter \u00e0 la base de donn\u00e9es\nengine = create_engine('sqlite:///ma_base_de_donnees.db')\nBase.metadata.create_all(engine)\n# Cr\u00e9er une session\nSession = sessionmaker(bind=engine)\nsession = Session()\n# Ajouter un utilisateur\nnouvel_utilisateur = Utilisateur(nom='Bob', age=40)\nsession.add(nouvel_utilisateur)\nsession.commit()\n# R\u00e9cup\u00e9rer des utilisateurs\nutilisateurs = session.query(Utilisateur).all()\nfor utilisateur in utilisateurs:\nprint(utilisateur.nom, utilisateur.age)\n</code></pre> <p>Travailler avec des bases de donn\u00e9es en Python est assez direct gr\u00e2ce aux modules int\u00e9gr\u00e9s et aux puissantes biblioth\u00e8ques tierces disponibles.</p>"},{"location":"12-web-dev/","title":"D\u00e9veloppement web avec Python","text":""},{"location":"12-web-dev/#developpement-web-avec-python","title":"D\u00e9veloppement Web avec Python","text":"<p>Le d\u00e9veloppement web en Python est devenu de plus en plus populaire gr\u00e2ce \u00e0 une vari\u00e9t\u00e9 de frameworks. Parmi eux, Flask, Django et FastAPI se d\u00e9marquent par leur popularit\u00e9 et leur utilit\u00e9. Examinons ces trois frameworks et d\u00e9couvrons comment les installer et les utiliser.</p>"},{"location":"12-web-dev/#flask-le-micro-framework","title":"Flask: Le Micro-Framework","text":"<p>Pr\u00e9sentation: Flask est un micro-framework l\u00e9ger, simple et extensible. Parfait pour les petites applications ou lorsque vous souhaitez une grande flexibilit\u00e9.</p> <p>Installation: <pre><code>pip install Flask\n</code></pre></p> <p>Exemple basique: <pre><code>from flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef accueil():\nreturn \"Salut avec Flask!\"\n</code></pre></p> <p>D\u00e9marrer l'application: Ex\u00e9cutez votre script Python. <pre><code>python nom_du_script.py\n</code></pre> Acc\u00e9dez \u00e0 <code>http://localhost:5000/</code> pour voir votre application.</p>"},{"location":"12-web-dev/#django-le-framework-haut-niveau","title":"Django: Le Framework Haut-Niveau","text":"<p>Pr\u00e9sentation: Django est complet et suit le mod\u00e8le \"batteries-included\". Il est id\u00e9al pour les grands projets ou lorsque vous voulez beaucoup de fonctionnalit\u00e9s int\u00e9gr\u00e9es.</p> <p>Installation: <pre><code>pip install django\n</code></pre></p> <p>Cr\u00e9ation d'un nouveau projet: <pre><code>django-admin startproject nomduprojet\n</code></pre></p> <p>Exemple basique: </p> <p>Dans <code>nomduprojet/views.py</code>, ajoutez: <pre><code>from django.http import HttpResponse\ndef accueil(request):\nreturn HttpResponse(\"Salut avec Django!\")\n</code></pre></p> <p>Ajoutez la route dans <code>nomduprojet/urls.py</code>: <pre><code>from django.urls import path\nfrom . import views\nurlpatterns = [\npath('', views.accueil, name='accueil'),\n]\n</code></pre></p> <p>D\u00e9marrer l'application:  <pre><code>cd nomduprojet\npython manage.py runserver\n</code></pre> Acc\u00e9dez \u00e0 <code>http://localhost:8000/</code>.</p>"},{"location":"12-web-dev/#fastapi-le-nouveau-venu","title":"FastAPI: Le Nouveau Venu","text":"<p>Pr\u00e9sentation: FastAPI est moderne et bas\u00e9 sur des types standard, ce qui le rend rapide. Id\u00e9al pour des APIs modernes.</p> <p>Installation: <pre><code>pip install fastapi[all] uvicorn\n</code></pre></p> <p>Exemple basique: <pre><code>from fastapi import FastAPI\napp = FastAPI()\n@app.get(\"/\")\ndef lire_racine():\nreturn {\"Salut\": \"avec FastAPI\"}\n</code></pre></p> <p>D\u00e9marrer l'application:  <pre><code>uvicorn nom_du_script:app --reload\n</code></pre> Acc\u00e9dez \u00e0 <code>http://localhost:8000/</code>.</p> <p>Conclusion:</p> <p>Le choix du framework d\u00e9pend des besoins de votre projet. Flask offre flexibilit\u00e9, Django fournit une suite d'outils compl\u00e8te, et FastAPI est optimal pour les performances \u00e9lev\u00e9es et les APIs modernes.</p>"},{"location":"13-api-web-scraping/","title":"APIs et Web Scraping","text":""},{"location":"13-api-web-scraping/#apis-et-web-scraping-exploration-a-travers-des-exemples","title":"APIs et Web Scraping : Exploration \u00e0 travers des exemples","text":"<p>Les technologies num\u00e9riques progressent \u00e0 une vitesse fulgurante, offrant des possibilit\u00e9s infinies pour collecter, analyser et exploiter des donn\u00e9es. Au c\u0153ur de ces avanc\u00e9es se trouvent les API (Interface de Programmation d'Application) et le Web Scraping. Dans cet article, nous plongerons dans le monde fascinant des API et du Web Scraping \u00e0 travers des exemples pratiques.</p>"},{"location":"13-api-web-scraping/#1-quest-ce-quune-api","title":"1. Qu'est-ce qu'une API?","text":"<p>Une API est un ensemble de r\u00e8gles et de protocoles pour construire et interagir avec des applications logicielles. C'est essentiellement une porte d'entr\u00e9e qui permet \u00e0 deux applications de communiquer entre elles.</p>"},{"location":"13-api-web-scraping/#exemple-avec-lapi-de-la-nasa","title":"Exemple avec l'API de la NASA","text":"<p>L'API de la NASA offre une gamme de donn\u00e9es sur l'astronomie, le climat, et plus encore. Prenons l'exemple de l'API APOD (Astronomy Picture of the Day):</p> <pre><code>import requests\nURL_NASA = \"https://api.nasa.gov/planetary/apod\"\nAPI_KEY = \"DEMO_KEY\"\nparams = {\"api_key\": API_KEY}\nresponse = requests.get(URL_NASA, params=params)\nif response.status_code == 200:\ndata = response.json()\nprint(f\"Titre: {data['title']}\")\nprint(f\"Description: {data['explanation']}\")\nprint(f\"URL de l'image: {data['url']}\")\nelse:\nprint(f\"Erreur {response.status_code}: {response.text}\")\n</code></pre>"},{"location":"13-api-web-scraping/#2-plongee-dans-le-web-scraping","title":"2. Plong\u00e9e dans le Web Scraping","text":"<p>Le Web Scraping est la m\u00e9thode utilis\u00e9e pour extraire des informations \u00e0 partir de sites web. C'est un moyen puissant d'acc\u00e9der \u00e0 des donn\u00e9es non disponibles via une API.</p>"},{"location":"13-api-web-scraping/#web-scraping-avec-beautiful-soup","title":"Web Scraping avec Beautiful Soup","text":"<p>Beautiful Soup est l'une des biblioth\u00e8ques les plus populaires pour le web scraping en Python.</p> <p>Exemple basique:</p> <pre><code>import requests\nfrom bs4 import BeautifulSoup\nURL = \"https://www.openai.com/research/\"\nresponse = requests.get(URL)\nsoup = BeautifulSoup(response.content, \"html.parser\")\ntitle = soup.title.text\nprint(title)\n</code></pre>"},{"location":"13-api-web-scraping/#3-lapi-jsonplaceholder","title":"3. L'API JSONPlaceholder","text":"<p>C'est une API gratuite qui simule une base de donn\u00e9es REST avec des donn\u00e9es fictives. Tr\u00e8s utile pour les tests et les maquettes.</p> <pre><code>import requests\nURL_JSONPLACEHOLDER = \"https://jsonplaceholder.typicode.com/posts\"\nresponse = requests.get(URL_JSONPLACEHOLDER)\nif response.status_code == 200:\nposts = response.json()\nfor post in posts[:5]:\nprint(f\"Titre: {post['title']}\")\nprint(f\"Contenu: {post['body']}\\n\")\nelse:\nprint(f\"Erreur {response.status_code}: {response.text}\")\n</code></pre>"},{"location":"13-api-web-scraping/#conclusion","title":"Conclusion","text":"<p>APIs et Web Scraping sont deux outils puissants qui offrent d'immenses possibilit\u00e9s dans le monde num\u00e9rique actuel. Qu'il s'agisse de collecter des donn\u00e9es pour une analyse approfondie ou d'int\u00e9grer des fonctionnalit\u00e9s dans une application, ces m\u00e9thodes sont essentielles pour quiconque travaille dans le domaine de la technologie. Il est cependant crucial de toujours respecter les conditions d'utilisation des sites web et des services d'API.</p>"},{"location":"14-analyse-de-donnees/","title":"Python pour l'analyse de donn\u00e9es","text":""},{"location":"14-analyse-de-donnees/#14-python-pour-lanalyse-de-donnees","title":"14. Python pour l'Analyse de Donn\u00e9es","text":"<p>Python est un outil puissant pour l'analyse de donn\u00e9es, notamment gr\u00e2ce \u00e0 des biblioth\u00e8ques comme Pandas et NumPy. Plongeons dans cet univers captivant.</p>"},{"location":"14-analyse-de-donnees/#introduction-a-pandas-et-numpy","title":"Introduction \u00e0 Pandas et NumPy","text":"<p>Pandas est une biblioth\u00e8que de manipulation de donn\u00e9es de haut niveau, construite sur la biblioth\u00e8que NumPy. Alors que NumPy est id\u00e9al pour travailler avec des tableaux de donn\u00e9es homog\u00e8nes, Pandas est con\u00e7u pour travailler avec des tableaux h\u00e9t\u00e9rog\u00e8nes, souvent repr\u00e9sent\u00e9s sous forme de tableaux (ou DataFrames).</p> <p>Installation:</p> <pre><code>pip install pandas numpy\n</code></pre>"},{"location":"14-analyse-de-donnees/#decouverte-de-pandas","title":"D\u00e9couverte de Pandas:","text":"<p>Cr\u00e9ation d'un DataFrame simple:</p> <pre><code>import pandas as pd\ndata = {\n'Noms': ['Alice', 'Bob', 'Charlie'],\n'\u00c2ges': [25, 30, 35],\n'Ville': ['Paris', 'Lyon', 'Marseille']\n}\ndf = pd.DataFrame(data)\nprint(df)\n</code></pre>"},{"location":"14-analyse-de-donnees/#manipulation-avec-numpy","title":"Manipulation avec NumPy:","text":"<p>NumPy est la biblioth\u00e8que de base pour la manipulation num\u00e9rique en Python. Elle fournit des objets pour manipuler des tableaux de donn\u00e9es de n'importe quel type.</p> <pre><code>import numpy as np\narray = np.array([1, 2, 3, 4, 5])\nprint(array)\n</code></pre>"},{"location":"14-analyse-de-donnees/#nettoyage-transformation-et-visualisation-des-donnees","title":"Nettoyage, Transformation et Visualisation des Donn\u00e9es:","text":"<p>Les donn\u00e9es r\u00e9elles sont souvent d\u00e9sordonn\u00e9es. Pandas offre une vari\u00e9t\u00e9 d'outils pour traiter ces probl\u00e8mes.</p> <p>Exemple de nettoyage:</p> <p>Supposons que nous ayons des donn\u00e9es avec des valeurs manquantes:</p> <pre><code>data = {\n'Noms': ['Alice', 'Bob', 'Charlie', 'David'],\n'\u00c2ges': [25, np.nan, 35, 40],\n'Ville': ['Paris', 'Lyon', 'Marseille', np.nan]\n}\ndf = pd.DataFrame(data)\nprint(df)\n# Supprimer les lignes avec des NaN\ndf_cleaned = df.dropna()\nprint(df_cleaned)\n</code></pre> <p>Transformation:</p> <p>Supposons que vous vouliez ajouter 5 ans \u00e0 chaque \u00e2ge:</p> <pre><code>df['\u00c2ges'] = df['\u00c2ges'].apply(lambda x: x + 5 if not np.isnan(x) else x)\nprint(df)\n</code></pre> <p>Visualisation:</p> <p>Pour visualiser les donn\u00e9es, nous pouvons utiliser la biblioth\u00e8que Matplotlib:</p> <pre><code>pip install matplotlib\n</code></pre> <pre><code>import matplotlib.pyplot as plt\nages = df['\u00c2ges'].dropna().tolist()\nnames = df['Noms'].tolist()\nplt.bar(names, ages)\nplt.xlabel('Noms')\nplt.ylabel('\u00c2ges')\nplt.title('\u00c2ge des personnes')\nplt.show()\n</code></pre>"},{"location":"14-analyse-de-donnees/#conclusion","title":"Conclusion:","text":"<p>Pandas et NumPy sont des outils essentiels pour toute personne souhaitant effectuer une analyse de donn\u00e9es avec Python. Ce tutoriel offre une introduction, mais les possibilit\u00e9s offertes par ces biblioth\u00e8ques sont immenses. Pour devenir vraiment comp\u00e9tent, il est recommand\u00e9 de pratiquer r\u00e9guli\u00e8rement et de consulter la documentation officielle.</p>"},{"location":"15-machine-learning/","title":"Python pour l'apprentissage automatique","text":""},{"location":"15-machine-learning/#15-python-pour-lapprentissage-automatique-machine-learning","title":"15. Python pour l'Apprentissage Automatique (Machine Learning)","text":"<p>Python est un choix de premier ordre pour l'apprentissage automatique, principalement en raison des biblioth\u00e8ques puissantes qu'il propose. L'une des biblioth\u00e8ques les plus appr\u00e9ci\u00e9es pour cela est Scikit-learn. Dans cet article, nous allons d\u00e9couvrir cette biblioth\u00e8que et mettre en \u0153uvre certains des algorithmes de machine learning fondamentaux.</p>"},{"location":"15-machine-learning/#introduction-a-scikit-learn","title":"Introduction \u00e0 Scikit-learn","text":"<p>Scikit-learn est une biblioth\u00e8que pour l'apprentissage automatique en Python. Elle fournit des outils simples et efficaces pour l'analyse de donn\u00e9es et la mod\u00e9lisation, avec des impl\u00e9mentations pour une grande vari\u00e9t\u00e9 d'algorithmes.</p> <p>Installation:</p> <pre><code>pip install scikit-learn\n</code></pre>"},{"location":"15-machine-learning/#decouverte-de-scikit-learn","title":"D\u00e9couverte de Scikit-learn:","text":"<p>La force de Scikit-learn r\u00e9side dans son interface coh\u00e9rente. La plupart du temps, vous allez: - Charger vos donn\u00e9es - Pr\u00e9parer vos donn\u00e9es - Choisir un mod\u00e8le - Entra\u00eener le mod\u00e8le - \u00c9valuer le mod\u00e8le - R\u00e9p\u00e9ter si n\u00e9cessaire</p>"},{"location":"15-machine-learning/#mise-en-uvre-dalgorithmes-de-base-en-machine-learning","title":"Mise en \u0153uvre d'algorithmes de base en Machine Learning:","text":"<p>1. R\u00e9gression Lin\u00e9aire:</p> <p>C'est l'un des algorithmes les plus simples. Il est utilis\u00e9 pour pr\u00e9dire une valeur num\u00e9rique.</p> <pre><code>from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport numpy as np\n# Simulons quelques donn\u00e9es\nX = 2 * np.random.rand(100, 1)\ny = 4 + 3 * X + np.random.randn(100, 1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nmse = mean_squared_error(y_test, y_pred)\nprint(f\"Erreur quadratique moyenne : {mse:.2f}\")\n</code></pre> <p>2. Classification avec le K plus proches voisins (KNN):</p> <p>Le KNN est un algorithme non param\u00e9trique utilis\u00e9 pour la classification et la r\u00e9gression.</p> <pre><code>from sklearn.datasets import load_iris\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\niris = load_iris()\nX_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.2)\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Pr\u00e9cision du mod\u00e8le : {accuracy*100:.2f}%\")\n</code></pre>"},{"location":"16-bonnes-pratiques-et-astuces/","title":"Meilleures pratiques et astuces","text":""},{"location":"16-bonnes-pratiques-et-astuces/#16-bonnes-pratiques-et-astuces-en-python","title":"16. Bonnes Pratiques et Astuces en Python","text":"<p>\u00c9crire un code fonctionnel est la premi\u00e8re \u00e9tape dans le d\u00e9veloppement, mais \u00e9crire du code propre, bien organis\u00e9 et maintenable est tout aussi crucial. Dans cette section, nous aborderons des sujets essentiels pour tout d\u00e9veloppeur Python souhaitant perfectionner ses comp\u00e9tences.</p>"},{"location":"16-bonnes-pratiques-et-astuces/#style-de-code-pep-8","title":"Style de code (PEP 8)","text":"<p>PEP 8 est le guide de style pour le code Python. Il contient des conventions pour nommer des variables, des m\u00e9thodes, structurer le code, etc.</p> <p>Quelques recommandations cl\u00e9s: - Utilisez une indentation de 4 espaces, pas de tabulations. - Limitez toutes les lignes \u00e0 79 caract\u00e8res pour le code et 72 pour la documentation. - Utilisez des noms de variables et de fonctions explicites. - Espacez les op\u00e9rateurs avec des espaces.</p> <pre><code># Bien\nx = 5\ny = 7\nz = x + y\n# Pas bien\nx=5\ny=7\nz = x+y\n</code></pre>"},{"location":"16-bonnes-pratiques-et-astuces/#journalisation-efficace-logging-et-debugging","title":"Journalisation efficace (Logging) et Debugging","text":"<p>Journalisation:</p> <p>La journalisation est essentielle pour comprendre le comportement de votre application en production. Avec le module <code>logging</code>, vous pouvez facilement int\u00e9grer cela \u00e0 vos programmes.</p> <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\nlogging.debug(\"Message de niveau Debug\")\nlogging.info(\"Message de niveau Info\")\nlogging.warning(\"Message d'avertissement\")\nlogging.error(\"Message d'erreur\")\nlogging.critical(\"Message critique\")\n</code></pre> <p>Debugging:</p> <p>Le module <code>pdb</code> (Python Debugger) est un outil int\u00e9gr\u00e9 tr\u00e8s utile.</p> <p>Pour l'utiliser, ajoutez simplement <code>import pdb; pdb.set_trace()</code> \u00e0 l'endroit o\u00f9 vous souhaitez commencer le d\u00e9bogage. Cela interromptra l'ex\u00e9cution et vous permettra d'inspecter les variables, d'ex\u00e9cuter le code ligne par ligne, etc.</p> <pre><code>def add(x, y):\nimport pdb; pdb.set_trace()\nreturn x + y\nadd(4, '4')  # Ceci provoquera une erreur\n</code></pre>"},{"location":"16-bonnes-pratiques-et-astuces/#environnements-virtuels-et-gestion-des-dependances","title":"Environnements Virtuels et Gestion des D\u00e9pendances","text":"<p>Utiliser des environnements virtuels permet de cr\u00e9er des espaces isol\u00e9s pour chaque projet, \u00e9vitant ainsi les conflits de d\u00e9pendances.</p> <p>Cr\u00e9ation d'un environnement virtuel avec <code>venv</code>:</p> <pre><code>python -m venv mon_environnement\n</code></pre> <p>Pour activer l'environnement: - Sur Windows: <code>mon_environnement\\Scripts\\activate</code> - Sur MacOS/Linux: <code>source mon_environnement/bin/activate</code></p> <p>Gestion des d\u00e9pendances avec <code>pip</code>:</p> <p>Pour installer un paquet:</p> <pre><code>pip install paquet_nom\n</code></pre> <p>Pour sauvegarder vos d\u00e9pendances:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>Et pour installer \u00e0 partir d'un fichier requirements:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"16-bonnes-pratiques-et-astuces/#conclusion","title":"Conclusion:","text":"<p>Respecter les bonnes pratiques est crucial pour assurer la lisibilit\u00e9, la maintenabilit\u00e9 et la robustesse de vos programmes. En investissant du temps pour ma\u00eetriser ces principes, vous vous facilitez la t\u00e2che \u00e0 long terme, tout en am\u00e9liorant la qualit\u00e9 de vos projets.</p>"},{"location":"17-prochaines-etapes/","title":"Conclusion et prochaines \u00e9tapes","text":""},{"location":"17-prochaines-etapes/#17-conclusion-et-prochaines-etapes","title":"17. Conclusion et Prochaines \u00c9tapes","text":"<p>Apr\u00e8s avoir acquis une solide compr\u00e9hension des concepts fondamentaux et avanc\u00e9s de Python, il est temps de se tourner vers l'application pratique de ces connaissances. La meilleure fa\u00e7on d'apprendre et de renforcer vos comp\u00e9tences est d'impl\u00e9menter des projets concrets et de continuer \u00e0 explorer les vastes ressources disponibles pour Python.</p>"},{"location":"17-prochaines-etapes/#projets-concrets-avec-python","title":"Projets Concrets avec Python","text":"<p>Un excellent moyen de renforcer vos comp\u00e9tences est de travailler sur des projets du monde r\u00e9el. Voici un exemple de projet pour vous lancer:</p> <p>Mini Projet: Gestionnaire de T\u00e2ches CLI</p> <p>Ce projet consiste \u00e0 cr\u00e9er un gestionnaire de t\u00e2ches en ligne de commande o\u00f9 les utilisateurs peuvent ajouter, afficher, et supprimer des t\u00e2ches.</p> <pre><code>tasks = []\ndef display_menu():\nprint(\"\\nGestionnaire de T\u00e2ches:\")\nprint(\"1. Ajouter une t\u00e2che\")\nprint(\"2. Afficher les t\u00e2ches\")\nprint(\"3. Supprimer une t\u00e2che\")\nprint(\"4. Quitter\")\ndef add_task():\ntask = input(\"\\nEntrez la t\u00e2che \u00e0 ajouter: \")\ntasks.append(task)\nprint(f\"'{task}' a \u00e9t\u00e9 ajout\u00e9.\")\ndef view_tasks():\nprint(\"\\nT\u00e2ches:\")\nfor i, task in enumerate(tasks, 1):\nprint(f\"{i}. {task}\")\ndef delete_task():\nview_tasks()\ntask_num = int(input(\"\\nEntrez le num\u00e9ro de la t\u00e2che \u00e0 supprimer: \"))\nif 0 &lt; task_num &lt;= len(tasks):\nremoved_task = tasks.pop(task_num - 1)\nprint(f\"'{removed_task}' a \u00e9t\u00e9 supprim\u00e9.\")\nelse:\nprint(\"Num\u00e9ro de t\u00e2che invalide.\")\nwhile True:\ndisplay_menu()\nchoice = input(\"\\nChoisissez une option: \")\nif choice == \"1\":\nadd_task()\nelif choice == \"2\":\nview_tasks()\nelif choice == \"3\":\ndelete_task()\nelif choice == \"4\":\nbreak\nelse:\nprint(\"Option invalide. Veuillez r\u00e9essayer.\")\n</code></pre> <p>Ce code simple offre un bon point de d\u00e9part pour d\u00e9velopper une application plus complexe, avec des fonctionnalit\u00e9s comme la persistance des donn\u00e9es ou une interface graphique.</p>"},{"location":"17-prochaines-etapes/#ressources-supplementaires-et-chemins-dapprentissage","title":"Ressources Suppl\u00e9mentaires et Chemins d'Apprentissage","text":"<ul> <li> <p>Documentation Officielle Python: C'est une ressource inestimable. Familiarisez-vous avec elle, car elle contient une multitude d'informations utiles.</p> </li> <li> <p>Frameworks Web Python: Consid\u00e9rez l'apprentissage de Flask, Django, ou FastAPI pour d\u00e9velopper des applications web.</p> </li> <li> <p>Machine Learning: Approfondissez vos connaissances avec des biblioth\u00e8ques comme TensorFlow ou PyTorch.</p> </li> <li> <p>Projets Open Source: Contribuer \u00e0 des projets open source est un excellent moyen de gagner en exp\u00e9rience et de comprendre les bonnes pratiques du d\u00e9veloppement en Python.</p> </li> </ul> <p>Le voyage d'apprentissage de Python est \u00e0 la fois passionnant et enrichissant. Il ne s'arr\u00eate jamais vraiment. Avec la vaste communaut\u00e9 et les nombreuses ressources disponibles, il y a toujours quelque chose de nouveau \u00e0 apprendre et \u00e0 explorer.</p>"},{"location":"2-bases/","title":"Bases","text":""},{"location":"2-bases/#les-bases-de-python","title":"Les bases de Python","text":""},{"location":"2-bases/#syntaxe-et-structure","title":"Syntaxe et Structure","text":"<p>Python est reconnu pour sa lisibilit\u00e9 et sa clart\u00e9. Voici quelques \u00e9l\u00e9ments cl\u00e9s de la syntaxe de Python:</p> <ul> <li>Indentation: Contrairement \u00e0 de nombreux autres langages, Python utilise l'indentation (des espaces ou des tabulations) pour d\u00e9limiter les blocs de code. Il est courant d'utiliser 4 espaces pour chaque niveau d'indentation.</li> </ul> <pre><code>if True:\nprint(\"L'indentation est correcte!\")\n</code></pre> <ul> <li>Commentaires: En Python, tout ce qui suit le symbole <code>#</code> sur une ligne est consid\u00e9r\u00e9 comme un commentaire et n'est pas ex\u00e9cut\u00e9.</li> </ul> <pre><code># Ceci est un commentaire\nprint(\"Ceci n'est pas un commentaire\")  # Mais ceci est un commentaire aussi!\n</code></pre> <ul> <li>Instructions de fin: Contrairement \u00e0 certains autres langages, Python n'utilise pas de point-virgule (<code>;</code>) \u00e0 la fin des instructions. Chaque instruction est g\u00e9n\u00e9ralement sur une nouvelle ligne.</li> </ul>"},{"location":"2-bases/#variables-et-types-de-donnees","title":"Variables et Types de Donn\u00e9es","text":"<ul> <li>D\u00e9claration de variables: En Python, les variables ne n\u00e9cessitent pas de d\u00e9claration explicite. Vous pouvez directement assigner une valeur \u00e0 une variable.</li> </ul> <pre><code>nom = \"Jean\"\nage = 30\n</code></pre> <ul> <li> <p>Types de donn\u00e9es courants:</p> <ul> <li>Entiers (<code>int</code>): <code>x = 5</code></li> <li>Flottants (<code>float</code>): <code>y = 3.14</code></li> <li>Cha\u00eenes de caract\u00e8res (<code>str</code>): <code>z = \"Bonjour\"</code></li> <li>Listes: <code>ma_liste = [1, 2, 3, 4]</code></li> <li>Dictionnaires: <code>mon_dico = {\"cl\u00e9\": \"valeur\", \"nom\": \"Jean\"}</code></li> </ul> </li> <li> <p>Type dynamique: Python est un langage \u00e0 typage dynamique, ce qui signifie que le type d'une variable est d\u00e9termin\u00e9 \u00e0 l'ex\u00e9cution et peut \u00eatre modifi\u00e9.</p> </li> </ul> <pre><code>x = 5          # x est un int\nx = \"Python\"   # Maintenant, x est un str\n</code></pre>"},{"location":"2-bases/#operateurs-de-base","title":"Op\u00e9rateurs de base","text":"<ul> <li> <p>Op\u00e9rateurs arithm\u00e9tiques:</p> <ul> <li>Addition: <code>x + y</code></li> <li>Soustraction: <code>x - y</code></li> <li>Multiplication: <code>x * y</code></li> <li>Division: <code>x / y</code></li> <li>Division enti\u00e8re: <code>x // y</code></li> <li>Modulo (reste de la division): <code>x % y</code></li> <li>Puissance: <code>x ** y</code></li> </ul> </li> <li> <p>Op\u00e9rateurs de comparaison:</p> <ul> <li>\u00c9gal \u00e0: <code>x == y</code></li> <li>Diff\u00e9rent de: <code>x != y</code></li> <li>Plus grand que: <code>x &gt; y</code></li> <li>Moins grand que: <code>x &lt; y</code></li> <li>Plus grand ou \u00e9gal \u00e0: <code>x &gt;= y</code></li> <li>Moins grand ou \u00e9gal \u00e0: <code>x &lt;= y</code></li> </ul> </li> <li> <p>Op\u00e9rateurs logiques:</p> <ul> <li>ET logique: <code>x and y</code></li> <li>OU logique: <code>x or y</code></li> <li>NON logique: <code>not x</code></li> </ul> </li> </ul>"},{"location":"3-controle-flux-iterations/","title":"Contr\u00f4le de flux et it\u00e9ration","text":""},{"location":"3-controle-flux-iterations/#controle-de-flux-et-iteration","title":"Contr\u00f4le de flux et It\u00e9ration","text":""},{"location":"3-controle-flux-iterations/#instructions-conditionnelles-if-elif-else","title":"Instructions conditionnelles (if, elif, else)","text":"<p>Les instructions conditionnelles permettent d'ex\u00e9cuter certaines portions de code en fonction de la v\u00e9rit\u00e9 d'une condition.</p> <ul> <li>if: ex\u00e9cute un bloc de code si la condition est vraie.</li> </ul> <pre><code>if condition:\n# code \u00e0 ex\u00e9cuter si la condition est vraie\n</code></pre> <ul> <li>elif: ajoute une condition suppl\u00e9mentaire apr\u00e8s un <code>if</code>. </li> </ul> <pre><code>if condition1:\n# code pour condition1\nelif condition2:\n# code pour condition2\n</code></pre> <ul> <li>else: ex\u00e9cute un bloc de code si aucune des conditions pr\u00e9c\u00e9dentes n'est vraie.</li> </ul> <pre><code>if condition:\n# code pour condition\nelse:\n# code \u00e0 ex\u00e9cuter si la condition est fausse\n</code></pre>"},{"location":"3-controle-flux-iterations/#boucles-for-et-while","title":"Boucles (for et while)","text":"<p>Les boucles permettent de r\u00e9p\u00e9ter l'ex\u00e9cution d'un bloc de code.</p> <ul> <li>for: ex\u00e9cute un bloc de code pour chaque \u00e9l\u00e9ment d'une s\u00e9quence.</li> </ul> <pre><code>for variable in s\u00e9quence:\n# code \u00e0 ex\u00e9cuter pour chaque \u00e9l\u00e9ment\n</code></pre> <p>Exemple avec une liste:</p> <pre><code>for num in [1, 2, 3, 4]:\nprint(num)\n</code></pre> <ul> <li>while: ex\u00e9cute un bloc de code tant qu'une condition est vraie.</li> </ul> <pre><code>while condition:\n# code \u00e0 ex\u00e9cuter tant que la condition est vraie\n</code></pre> <p>Exemple:</p> <pre><code>compteur = 0\nwhile compteur &lt; 5:\nprint(compteur)\ncompteur += 1\n</code></pre>"},{"location":"3-controle-flux-iterations/#break-continue-et-pass","title":"Break, Continue, et Pass","text":"<p>Ces instructions sont utilis\u00e9es pour modifier le comportement normal d'une boucle.</p> <ul> <li>break: termine la boucle courante.</li> </ul> <pre><code>for num in [1, 2, 3, 4]:\nif num == 3:\nbreak\nprint(num)\n# R\u00e9sultat : 1, 2\n</code></pre> <ul> <li>continue: passe \u00e0 l'it\u00e9ration suivante de la boucle, en sautant le reste du code de l'it\u00e9ration courante.</li> </ul> <pre><code>for num in [1, 2, 3, 4]:\nif num == 3:\ncontinue\nprint(num)\n# R\u00e9sultat : 1, 2, 4\n</code></pre> <ul> <li>pass: une instruction vide, qui ne fait rien. Elle peut \u00eatre utilis\u00e9e comme un espace r\u00e9serv\u00e9 lorsque une instruction est requise par la syntaxe, mais aucune action n'est n\u00e9cessaire.</li> </ul> <pre><code>for num in [1, 2, 3, 4]:\nif num == 3:\npass\nprint(num)\n# R\u00e9sultat : 1, 2, 3, 4\n</code></pre>"},{"location":"4-structures-de-donnees/","title":"Structures de donn\u00e9es","text":""},{"location":"4-structures-de-donnees/#structures-de-donnees","title":"Structures de Donn\u00e9es","text":""},{"location":"4-structures-de-donnees/#listes-et-comprehensions-de-liste","title":"Listes et Compr\u00e9hensions de Liste","text":"<ul> <li>Listes: Une liste est une collection ordonn\u00e9e et modifiable d'\u00e9l\u00e9ments. Les \u00e9l\u00e9ments d'une liste peuvent \u00eatre de n'importe quel type.</li> </ul> <pre><code>ma_liste = [1, 2, 3, 4, \"python\", 3.14]\n</code></pre> <ul> <li>Acc\u00e8s aux \u00e9l\u00e9ments: Vous pouvez acc\u00e9der \u00e0 un \u00e9l\u00e9ment de la liste en utilisant son index.</li> </ul> <pre><code>premier_element = ma_liste[0]  # R\u00e9sultat: 1\ndernier_element = ma_liste[-1]  # R\u00e9sultat: 3.14\n</code></pre> <ul> <li>Modification de la liste: Les listes sont mutables, ce qui signifie que vous pouvez modifier, ajouter ou supprimer des \u00e9l\u00e9ments.</li> </ul> <pre><code>ma_liste[4] = \"JAVA\"\nma_liste.append(5)  # Ajoute 5 \u00e0 la fin de la liste\n</code></pre> <ul> <li>Compr\u00e9hensions de liste: C'est une mani\u00e8re concise de cr\u00e9er des listes.</li> </ul> <pre><code>carres = [x**2 for x in range(10)]  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n</code></pre>"},{"location":"4-structures-de-donnees/#tuples","title":"Tuples","text":"<ul> <li>Tuples: Un tuple est une collection ordonn\u00e9e et non modifiable d'\u00e9l\u00e9ments.</li> </ul> <pre><code>mon_tuple = (1, 2, 3, \"python\", 3.14)\n</code></pre> <ul> <li>Acc\u00e8s aux \u00e9l\u00e9ments: Semblable aux listes, mais gardez \u00e0 l'esprit que les tuples sont immuables.</li> </ul> <pre><code>premier_element = mon_tuple[0]  # R\u00e9sultat: 1\n</code></pre>"},{"location":"4-structures-de-donnees/#dictionnaires","title":"Dictionnaires","text":"<ul> <li>Dictionnaires: Une collection non ordonn\u00e9e de paires cl\u00e9-valeur.</li> </ul> <pre><code>mon_dico = {\n\"nom\": \"Jean\",\n\"age\": 30,\n\"ville\": \"Paris\"\n}\n</code></pre> <ul> <li>Acc\u00e8s et modification: </li> </ul> <pre><code>nom = mon_dico[\"nom\"]  # R\u00e9sultat: \"Jean\"\nmon_dico[\"age\"] = 31   # Modifie l'\u00e2ge \u00e0 31\n</code></pre> <ul> <li>Ajout et suppression de cl\u00e9s:</li> </ul> <pre><code>mon_dico[\"profession\"] = \"Ing\u00e9nieur\"\ndel mon_dico[\"ville\"]\n</code></pre>"},{"location":"4-structures-de-donnees/#ensembles-sets","title":"Ensembles (Sets)","text":"<ul> <li>Sets: Une collection non ordonn\u00e9e d'\u00e9l\u00e9ments uniques.</li> </ul> <pre><code>mon_ensemble = {1, 2, 3, 4, 4, 5, 5}\n</code></pre> <p>Cela cr\u00e9e un ensemble avec les \u00e9l\u00e9ments <code>{1, 2, 3, 4, 5}</code> car les ensembles ne permettent pas les doublons.</p> <ul> <li>Op\u00e9rations courantes sur les ensembles: union, intersection, diff\u00e9rence.</li> </ul> <pre><code>A = {1, 2, 3, 4}\nB = {3, 4, 5, 6}\nunion = A | B          # {1, 2, 3, 4, 5, 6}\nintersection = A &amp; B   # {3, 4}\ndifference = A - B     # {1, 2}\n</code></pre>"},{"location":"5-fonctions/","title":"Fonctions","text":""},{"location":"5-fonctions/#fonctions","title":"Fonctions","text":"<p>Les fonctions sont des blocs de code r\u00e9utilisables qui effectuent une t\u00e2che sp\u00e9cifique. En Python, il existe des fonctions int\u00e9gr\u00e9es, et vous pouvez \u00e9galement d\u00e9finir vos propres fonctions.</p>"},{"location":"5-fonctions/#definition-et-appel-de-fonctions","title":"D\u00e9finition et Appel de Fonctions","text":"<ul> <li>D\u00e9finir une fonction avec le mot-cl\u00e9 <code>def</code> suivi du nom de la fonction et des parenth\u00e8ses <code>()</code>:</li> </ul> <pre><code>def ma_fonction():\nprint(\"Bonjour depuis ma fonction!\")\n</code></pre> <ul> <li>Appel de la fonction en utilisant son nom suivi de parenth\u00e8ses:</li> </ul> <pre><code>ma_fonction()  # Affiche: \"Bonjour depuis ma fonction!\"\n</code></pre> <ul> <li>Param\u00e8tres: Une fonction peut accepter des valeurs, appel\u00e9es param\u00e8tres, qui affectent son comportement:</li> </ul> <pre><code>def saluer(nom):\nprint(f\"Bonjour, {nom}!\")\nsaluer(\"Lucian\")  # Affiche: \"Bonjour, Lucian!\"\n</code></pre> <ul> <li>Retour de valeur: Une fonction peut renvoyer une valeur \u00e0 l'aide du mot-cl\u00e9 <code>return</code>:</li> </ul> <pre><code>def additionner(x, y):\nreturn x + y\nresultat = additionner(3, 4)  # resultat vaut 7\n</code></pre>"},{"location":"5-fonctions/#fonctions-lambda","title":"Fonctions Lambda","text":"<p>Une fonction lambda est une petite fonction anonyme qui peut avoir un nombre quelconque de param\u00e8tres, mais ne peut avoir qu'une seule expression.</p> <pre><code>carre = lambda x: x**2\nprint(carre(5))  # Affiche: 25\n</code></pre>"},{"location":"5-fonctions/#fonctions-integrees","title":"Fonctions Int\u00e9gr\u00e9es","text":"<p>Python fournit de nombreuses fonctions int\u00e9gr\u00e9es qui sont toujours disponibles. Voici quelques exemples courants:</p> <ul> <li><code>print()</code>: Affiche des messages ou des variables:</li> </ul> <pre><code>print(\"Bonjour!\")\n</code></pre> <ul> <li><code>len()</code>: Renvoie la longueur d'un objet, comme une liste ou une cha\u00eene:</li> </ul> <pre><code>longueur = len(\"Python\")  # longueur vaut 6\n</code></pre> <ul> <li><code>type()</code>: Renvoie le type d'un objet:</li> </ul> <pre><code>typ = type(123)  # typ vaut &lt;class 'int'&gt;\n</code></pre> <ul> <li><code>str()</code>, <code>int()</code>, <code>float()</code>: Convertissent des valeurs en cha\u00eene de caract\u00e8res, entier ou nombre \u00e0 virgule flottante respectivement:</li> </ul> <pre><code>nombre = str(123)  # nombre vaut \"123\"\n</code></pre> <ul> <li><code>list()</code>, <code>tuple()</code>, <code>dict()</code>, <code>set()</code>: Convertissent des valeurs en liste, tuple, dictionnaire ou ensemble respectivement.</li> </ul> <p>Il existe de nombreuses autres fonctions int\u00e9gr\u00e9es en Python, et elles sont con\u00e7ues pour faciliter et acc\u00e9l\u00e9rer votre codage.</p>"},{"location":"6-modules-et-paquets/","title":"Modules et Paquets","text":""},{"location":"6-modules-et-paquets/#modules-et-paquets","title":"Modules et Paquets","text":"<p>Dans la programmation Python, un module est un fichier contenant des d\u00e9finitions et des instructions Python. Le fichier nomm\u00e9 <code>module.py</code> a le nom de module <code>module</code> que vous pouvez utiliser dans un script Python avec le mot-cl\u00e9 <code>import</code>. Un paquet est une mani\u00e8re d'organiser des modules connexes dans un r\u00e9pertoire.</p>"},{"location":"6-modules-et-paquets/#quest-ce-que-sont-les-modules-et-les-paquets","title":"Qu'est-ce que sont les Modules et les Paquets?","text":"<ul> <li>Modules: Un module est essentiellement un fichier contenant du code Python. Il peut d\u00e9finir des fonctions, des classes et des variables, et peut \u00e9galement inclure du code ex\u00e9cutable.</li> </ul> <p>Exemple: <code>mon_module.py</code></p> <ul> <li>Paquets: Un paquet est un moyen d'organiser plusieurs modules en un seul r\u00e9pertoire. Ce r\u00e9pertoire contient un fichier sp\u00e9cial appel\u00e9 <code>__init__.py</code> (qui peut \u00eatre vide) pour indiquer \u00e0 Python que le r\u00e9pertoire doit \u00eatre trait\u00e9 comme un paquet ou un module.</li> </ul> <p>Structure d'un paquet:   <pre><code>mon_paquet/\n\u251c\u2500 __init__.py\n\u251c\u2500 module1.py\n\u2514\u2500 module2.py\n</code></pre></p>"},{"location":"6-modules-et-paquets/#importer-des-modules","title":"Importer des Modules","text":"<ul> <li>Importation d'un module: Pour utiliser un module, vous devez l'importer \u00e0 l'aide du mot-cl\u00e9 <code>import</code>.</li> </ul> <pre><code>import mon_module\n</code></pre> <p>Apr\u00e8s cette importation, vous pouvez acc\u00e9der aux fonctions ou variables d\u00e9finies dans <code>mon_module</code> en utilisant <code>mon_module.nom_fonction</code> ou <code>mon_module.nom_variable</code>.</p> <ul> <li>Alias lors de l'importation: Vous pouvez donner un alias au module lors de l'importation pour simplifier ou clarifier le code.</li> </ul> <pre><code>import mon_module as mm\n</code></pre> <ul> <li>Importer des \u00e9l\u00e9ments sp\u00e9cifiques d'un module: Vous pouvez importer des \u00e9l\u00e9ments sp\u00e9cifiques d'un module plut\u00f4t que le module entier.</li> </ul> <pre><code>from mon_module import ma_fonction\n</code></pre>"},{"location":"6-modules-et-paquets/#explorer-la-bibliotheque-standard-python","title":"Explorer la Biblioth\u00e8que Standard Python","text":"<p>La biblioth\u00e8que standard Python est une vaste collection de modules qui sont inclus avec Python et fournissent des fonctionnalit\u00e9s essentielles, allant de l'acc\u00e8s au syst\u00e8me d'exploitation aux outils de programmation web.</p> <p>Voici quelques modules couramment utilis\u00e9s:</p> <ul> <li><code>math</code>: Fournit des fonctions math\u00e9matiques.</li> </ul> <pre><code>import math\nracine_carree = math.sqrt(16)  # 4.0\n</code></pre> <ul> <li><code>datetime</code>: Pour manipuler les dates et les temps.</li> </ul> <pre><code>from datetime import datetime\nmaintenant = datetime.now()\n</code></pre> <ul> <li><code>os</code>: Fournit des fonctions pour interagir avec le syst\u00e8me d'exploitation.</li> </ul> <pre><code>import os\nrep_courant = os.getcwd()  # Renvoie le r\u00e9pertoire courant\n</code></pre> <ul> <li><code>sys</code>: Acc\u00e8de \u00e0 certaines variables utilis\u00e9es ou maintenues par l'interpr\u00e9teur et aux fonctions qui interagissent fortement avec l'interpr\u00e9teur.</li> </ul> <pre><code>import sys\nsys.exit()  # Quitte l'interpr\u00e9teur Python\n</code></pre> <ul> <li><code>json</code>: Pour encoder et d\u00e9coder le format JSON.</li> </ul> <pre><code>import json\ndonnees = json.loads('{\"nom\": \"Jean\", \"age\": 30}')\n</code></pre> <p>C'est une petite fraction de la biblioth\u00e8que standard. Elle est vaste et couvre de nombreux domaines, rendant Python puissant et polyvalent d\u00e8s l'installation.</p>"},{"location":"7-manipulation-de-fichiers/","title":"Gestion des fichiers","text":""},{"location":"7-manipulation-de-fichiers/#manipulation-de-fichiers","title":"Manipulation de Fichiers","text":"<p>En Python, la manipulation de fichiers est facile. Vous pouvez lire et \u00e9crire des fichiers texte, des CSV, des JSON et m\u00eame des XML.</p>"},{"location":"7-manipulation-de-fichiers/#lire-et-ecrire-des-fichiers","title":"Lire et \u00c9crire des Fichiers","text":"<ul> <li>Ouvrir un fichier: Utilisez la fonction <code>open()</code>. Par d\u00e9faut, le fichier est ouvert en mode lecture ('r').</li> </ul> <pre><code>f = open(\"mon_fichier.txt\", \"r\")\n</code></pre> <ul> <li> <p>Lire un fichier: </p> </li> <li> <p><code>read()</code>: Pour lire le contenu complet.</p> </li> </ul> <pre><code>contenu = f.read()\n</code></pre> <ul> <li><code>readline()</code>: Pour lire une ligne.</li> </ul> <pre><code>premiere_ligne = f.readline()\n</code></pre> <ul> <li><code>readlines()</code>: Pour lire toutes les lignes dans une liste.</li> </ul> <pre><code>toutes_les_lignes = f.readlines()\n</code></pre> <ul> <li>\u00c9crire dans un fichier: Ouvrez le fichier en mode \u00e9criture ('w'). Attention, cela \u00e9crasera le contenu existant.</li> </ul> <pre><code>f = open(\"mon_fichier.txt\", \"w\")\nf.write(\"Bonjour!\")\n</code></pre> <ul> <li>Fermer un fichier: Il est essentiel de fermer un fichier apr\u00e8s l'avoir utilis\u00e9.</li> </ul> <pre><code>f.close()\n</code></pre> <ul> <li>Utiliser <code>with</code>: Cette m\u00e9thode est pr\u00e9f\u00e9r\u00e9e car elle ferme automatiquement le fichier une fois le bloc de code sous-jacent ex\u00e9cut\u00e9.</li> </ul> <pre><code>with open(\"mon_fichier.txt\", \"r\") as f:\ncontenu = f.read()\n</code></pre>"},{"location":"7-manipulation-de-fichiers/#gestion-des-donnees-csv-json-et-xml","title":"Gestion des donn\u00e9es CSV, JSON et XML","text":"<ul> <li>CSV (Comma-Separated Values):</li> </ul> <p>Python a un module int\u00e9gr\u00e9 <code>csv</code> pour g\u00e9rer les fichiers CSV.</p> <ul> <li> <p>Lire un CSV:</p> <pre><code>import csv\nwith open('mon_fichier.csv', mode ='r')as file:\ncsvFile = csv.reader(file)\nfor line in csvFile:\nprint(line)\n</code></pre> </li> <li> <p>\u00c9crire dans un CSV:</p> </li> </ul> <pre><code>with open('mon_fichier.csv', mode ='w')as file:\nwriter = csv.writer(file)\nwriter.writerow([\"nom\", \"age\"])\nwriter.writerow([\"Jean\", 30])\n</code></pre> <ul> <li>JSON (JavaScript Object Notation):</li> </ul> <p>Le module <code>json</code> permet d'encoder et de d\u00e9coder des donn\u00e9es JSON.</p> <ul> <li>Lire un JSON:</li> </ul> <pre><code>import json\nwith open('mon_fichier.json', 'r') as file:\ndonnees = json.load(file)\n</code></pre> <ul> <li>\u00c9crire dans un JSON:</li> </ul> <pre><code>donnees = {\"nom\": \"Jean\", \"age\": 30}\nwith open('mon_fichier.json', 'w') as file:\njson.dump(donnees, file)\n</code></pre> <ul> <li>XML (eXtensible Markup Language):</li> </ul> <p>Le module <code>xml.etree.ElementTree</code> est souvent utilis\u00e9 pour parcourir et modifier des fichiers XML.</p> <ul> <li>Lire un XML:</li> </ul> <pre><code>import xml.etree.ElementTree as ET\ntree = ET.parse('mon_fichier.xml')\nroot = tree.getroot()\nfor elem in root:\nprint(elem.tag, elem.attrib)\n</code></pre> <ul> <li>\u00c9crire dans un XML est un peu plus complexe. Vous cr\u00e9ez des \u00e9l\u00e9ments, les ajoutez \u00e0 l'arbre, puis sauvegardez l'arbre.</li> </ul>"},{"location":"8-programmation-orientee-objet/","title":"Programmation orient\u00e9e objet (POO)","text":""},{"location":"8-programmation-orientee-objet/#programmation-orientee-objet-poo","title":"Programmation Orient\u00e9e Objet (POO)","text":"<p>La POO est un paradigme de programmation qui repose sur l'id\u00e9e de regrouper les donn\u00e9es et les fonctions qui les manipulent en une seule unit\u00e9 appel\u00e9e objet. En Python, la POO est facilit\u00e9e par le concept de classes et d'objets.</p>"},{"location":"8-programmation-orientee-objet/#introduction-a-la-poo","title":"Introduction \u00e0 la POO","text":"<p>La Programmation Orient\u00e9e Objet est bas\u00e9e sur des concepts qui cherchent \u00e0 modulariser et organiser le code de mani\u00e8re plus intuitive et proche de la mani\u00e8re dont nous percevons le monde: en objets avec des propri\u00e9t\u00e9s (attributs) et des capacit\u00e9s (m\u00e9thodes).</p>"},{"location":"8-programmation-orientee-objet/#classes-et-objets","title":"Classes et Objets","text":"<ul> <li>Classe: Une classe est un blueprint ou un mod\u00e8le pour cr\u00e9er des objets. Elle d\u00e9finit des attributs (variables) et des m\u00e9thodes (fonctions).</li> </ul> <pre><code>class Voiture:\ndef __init__(self, marque, couleur):\nself.marque = marque\nself.couleur = couleur\ndef klaxonner(self):\nprint(f\"{self.marque} dit: Klaxon!\")\n</code></pre> <ul> <li>Objet: Un objet est une instance d'une classe. C'est un exemplaire sp\u00e9cifique de la classe.</li> </ul> <pre><code>ma_voiture = Voiture(\"Toyota\", \"rouge\")\nma_voiture.klaxonner()  # Affiche: \"Toyota dit: Klaxon!\"\n</code></pre>"},{"location":"8-programmation-orientee-objet/#heritage-et-polymorphisme","title":"H\u00e9ritage et Polymorphisme","text":"<ul> <li>H\u00e9ritage: C'est un m\u00e9canisme dans lequel une nouvelle classe est d\u00e9riv\u00e9e d'une classe existante. La nouvelle classe h\u00e9rite des attributs et des m\u00e9thodes de la classe de base.</li> </ul> <pre><code>class VehiculeElectrique(Voiture):\ndef __init__(self, marque, couleur, autonomie):\nsuper().__init__(marque, couleur)\nself.autonomie = autonomie\ndef afficher_autonomie(self):\nprint(f\"Autonomie restante: {self.autonomie} km\")\n</code></pre> <ul> <li>Polymorphisme: C'est la capacit\u00e9 de prendre plusieurs formes. En POO, cela signifie que diff\u00e9rentes classes peuvent \u00eatre trait\u00e9es comme des instances de la m\u00eame classe gr\u00e2ce \u00e0 l'h\u00e9ritage.</li> </ul> <pre><code>def klaxonner_vehicule(vehicule):\nvehicule.klaxonner()\n# Bien que les deux objets soient de types diff\u00e9rents, ils peuvent \u00eatre trait\u00e9s de la m\u00eame mani\u00e8re gr\u00e2ce au polymorphisme.\nklaxonner_vehicule(ma_voiture)\nklaxonner_vehicule(VehiculeElectrique(\"Tesla\", \"noir\", 500))\n</code></pre>"},{"location":"8-programmation-orientee-objet/#encapsulation-et-abstraction","title":"Encapsulation et Abstraction","text":"<ul> <li>Encapsulation: C'est le regroupement des donn\u00e9es (attributs) et des m\u00e9thodes qui les manipulent en une seule unit\u00e9 (objet). Vous pouvez \u00e9galement restreindre l'acc\u00e8s aux attributs et m\u00e9thodes en utilisant des modificateurs priv\u00e9s (<code>_</code> ou <code>__</code>).</li> </ul> <pre><code>class ExempleEncapsulation:\ndef __init__(self):\nself.public = \"Je suis public!\"\nself._protege = \"Je suis prot\u00e9g\u00e9!\"\nself.__prive = \"Je suis priv\u00e9!\"\n</code></pre> <ul> <li>Abstraction: Il s'agit de cacher la complexit\u00e9 r\u00e9elle tout en exposant uniquement les parties essentielles. En POO, cela est r\u00e9alis\u00e9 en utilisant des classes et des objets.</li> </ul>"},{"location":"9-erreurs-et-exceptions/","title":"Gestion des erreurs et exceptions","text":""},{"location":"9-erreurs-et-exceptions/#gestion-des-erreurs-et-exceptions","title":"Gestion des Erreurs et Exceptions","text":"<p>La gestion des erreurs est essentielle pour tout programmeur. En Python, les erreurs peuvent \u00eatre trait\u00e9es efficacement \u00e0 l'aide du m\u00e9canisme d'exceptions.</p>"},{"location":"9-erreurs-et-exceptions/#comprendre-les-erreurs-et-exceptions","title":"Comprendre les Erreurs et Exceptions","text":"<ul> <li> <p>Erreur: Il s'agit d'un probl\u00e8me dans le code qui emp\u00eache le programme de s'ex\u00e9cuter.</p> </li> <li> <p>Exception: Une fois que le programme est en cours d'ex\u00e9cution, s'il rencontre une situation qu'il ne sait pas comment g\u00e9rer, il g\u00e9n\u00e8re une exception.</p> </li> </ul>"},{"location":"9-erreurs-et-exceptions/#blocs-try-except-et-finally","title":"Blocs Try, Except et Finally","text":"<ul> <li> <p>Bloc <code>try</code>: Le code susceptible de g\u00e9n\u00e9rer une exception est plac\u00e9 dans le bloc <code>try</code>.</p> </li> <li> <p>Bloc <code>except</code>: Si une exception est g\u00e9n\u00e9r\u00e9e dans le bloc <code>try</code>, le contr\u00f4le est imm\u00e9diatement transf\u00e9r\u00e9 au bloc <code>except</code>, o\u00f9 l'exception peut \u00eatre trait\u00e9e.</p> </li> <li> <p>Bloc <code>finally</code>: Il est ex\u00e9cut\u00e9 quel que soit le r\u00e9sultat des blocs <code>try</code> et <code>except</code>, g\u00e9n\u00e9ralement utilis\u00e9 pour effectuer des op\u00e9rations de nettoyage.</p> </li> </ul> <p>Exemple: <pre><code>try:\nresultat = 10 / 0\nexcept ZeroDivisionError:\nprint(\"Division par z\u00e9ro!\")\nfinally:\nprint(\"Ce code s'ex\u00e9cute quoi qu'il arrive.\")\n</code></pre></p> <p>Dans l'exemple ci-dessus, le bloc <code>try</code> g\u00e9n\u00e8re une exception <code>ZeroDivisionError</code>, le contr\u00f4le est donc transf\u00e9r\u00e9 au bloc <code>except</code>, et apr\u00e8s cela, le bloc <code>finally</code> est ex\u00e9cut\u00e9.</p>"},{"location":"9-erreurs-et-exceptions/#exceptions-personnalisees","title":"Exceptions Personnalis\u00e9es","text":"<p>Vous pouvez d\u00e9finir vos propres exceptions en Python. Ces exceptions doivent \u00eatre d\u00e9riv\u00e9es, directement ou indirectement, de la classe <code>Exception</code>.</p> <p>Exemple:</p> <pre><code>class ValeurTropHaute(Exception):\npass\nclass ValeurTropBasse(Exception):\npass\nnombre = 10\ntry:\nentree = int(input(\"Entrez un nombre: \"))\nif entree &gt; nombre:\nraise ValeurTropHaute\nelif entree &lt; nombre:\nraise ValeurTropBasse\nexcept ValeurTropHaute:\nprint(\"Cette valeur est trop haute!\")\nexcept ValeurTropBasse:\nprint(\"Cette valeur est trop basse!\")\n</code></pre> <p>Dans cet exemple, nous avons cr\u00e9\u00e9 deux exceptions personnalis\u00e9es, <code>ValeurTropHaute</code> et <code>ValeurTropBasse</code>. Si l'utilisateur entre un nombre trop \u00e9lev\u00e9 ou trop bas, l'exception appropri\u00e9e est lev\u00e9e \u00e0 l'aide du mot-cl\u00e9 <code>raise</code>.</p>"}]}